SFGPL_DICT_DATA={
	'pa':{'ID': '0', 'word': 'pa', 'func': 'LangObj.NOT', 'arg': 1, 'exp': '[NOT 1st_arg]', 'Pronunciation': 'pa', 'How to use': 'pa A', 'Japanese': 'Aでない', 'English': 'not A', 'Explanation': 'Used to express a reversal of meaning, negation, etc. in relation to A.', 'Programming Object': 'LangObj.NOT(A)', 'Return Object Type': 'type(A)', 'Condition': ''},
	'pe':{'ID': '1', 'word': 'pe', 'func': 'LangObj.Because', 'arg': 2, 'exp': '[1st_arg because 2nd_arg]', 'Pronunciation': 'pe', 'How to use': 'pe A B', 'Japanese': 'AなぜならばB', 'English': 'A because B', 'Explanation': 'Used to express that there is a reason B for A.', 'Programming Object': 'LangObj.Because(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'pi':{'ID': '2', 'word': 'pi', 'func': 'LangObj.IF', 'arg': 2, 'exp': '[If the condition is 1st_arg, then it is 2nd_arg]', 'Pronunciation': 'pi', 'How to use': 'pi A B', 'Japanese': 'もしAならばBである', 'English': 'if A, B', 'Explanation': 'Used to express that, in relation to a condition A, it is B.', 'Programming Object': 'LangObj.IF(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'pu':{'ID': '3', 'word': 'pu', 'func': 'LangObj.So', 'arg': 2, 'exp': '[1st_arg so 2nd_arg]', 'Pronunciation': 'pu', 'How to use': 'pu A B', 'Japanese': 'AだからB', 'English': 'A so B', 'Explanation': 'Used to express that B is a proper reason, cause, trigger or condition for a proposition in relation to A.', 'Programming Object': 'LangObj.So(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'po':{'ID': '4', 'word': 'po', 'func': 'LangObj.But', 'arg': 2, 'exp': '[1st_arg but 2nd_arg]', 'Pronunciation': 'po', 'How to use': 'po A B', 'Japanese': 'AしかしB', 'English': 'A but B', 'Explanation': 'Used to express that B is a contradiction or conflict in relation to A.', 'Programming Object': 'LangObj.But(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'ba':{'ID': '5', 'word': 'ba', 'func': 'LangObj.AND', 'arg': 2, 'exp': '[1st_arg AND 2nd_arg]', 'Pronunciation': 'ba', 'How to use': 'ba A B', 'Japanese': 'AかつB', 'English': 'A and B', 'Explanation': 'Used to express the case where both A and B are true.', 'Programming Object': 'LangObj.AND(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'be':{'ID': '6', 'word': 'be', 'func': 'LangObj.OR', 'arg': 2, 'exp': '[1st_arg AND 2nd_arg]', 'Pronunciation': 'be', 'How to use': 'be A B', 'Japanese': 'AまたはB', 'English': 'A or B', 'Explanation': 'Used to express the case where either A or B is true.', 'Programming Object': 'LangObj.OR(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'bi':{'ID': '7', 'word': 'bi', 'func': 'LangObj.IFELSE', 'arg': 3, 'exp': '[If the condition is 1st_arg, then it is 2nd_arg, otherwise it is 3rd_arg]', 'Pronunciation': 'bi', 'How to use': 'bi A B C', 'Japanese': 'もしAならばBである，そうでなければCである', 'English': 'If A, B, otherwise C', 'Explanation': 'Used to express that, with respect to a condition A, B is true. And is used to express that, with respect to a condition other than A, it is C.', 'Programming Object': 'LangObj.IFELSE(A,B,C)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B) AND type(A)==type(C)'},
	'bu':{'ID': '8', 'word': 'bu', 'func': 'LangObj.NAND', 'arg': 2, 'exp': '[1st_arg NAND 2nd_arg]', 'Pronunciation': 'bu', 'How to use': 'bu A B', 'Japanese': 'AかつBでない', 'English': 'A nand B', 'Explanation': "Used to express the case where both A and B aren't true.", 'Programming Object': 'LangObj.NAND(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'bo':{'ID': '9', 'word': 'bo', 'func': 'LangObj.NOR', 'arg': 2, 'exp': '[1st_arg NOR 2nd_arg]', 'Pronunciation': 'bo', 'How to use': 'bo A B', 'Japanese': 'AまたはBでない', 'English': 'A nor B', 'Explanation': "Used to express the case where either A or B isn't true.", 'Programming Object': 'LangObj.NOR(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'fa':{'ID': '10', 'word': 'fa', 'func': 'Noun', 'arg': 1, 'exp': '[1st_arg exists]', 'Pronunciation': 'fa', 'How to use': 'fa A', 'Japanese': 'Aは存在する', 'English': 'There be A / A exist', 'Explanation': 'It is used to express the existence of a thing or concept called A.', 'Programming Object': 'Noun(A)', 'Return Object Type': 'Noun', 'Condition': ''},
	'fi':{'ID': '11', 'word': 'fi', 'func': 'Noun.V2N', 'arg': 1, 'exp': '[Make nouns from 1st_arg]', 'Pronunciation': 'fi', 'How to use': 'fi A', 'Japanese': '動詞から名詞に変換する', 'English': 'Converting verbs to nouns.', 'Explanation': 'Make nouns from A [verb].', 'Programming Object': 'Noun.V2N(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Verb'},
	'fu':{'ID': '12', 'word': 'fu', 'func': 'Noun.M2N', 'arg': 1, 'exp': '[Make nouns from 1st_arg]', 'Pronunciation': 'fu', 'How to use': 'fu A', 'Japanese': '修飾語から名詞に変換する', 'English': 'Converting modifiers to nouns.', 'Explanation': 'Make nouns from A [modifier].', 'Programming Object': 'Noun.M2N(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Modifier'},
	'fo':{'ID': '13', 'word': 'fo', 'func': 'Noun.none', 'arg': 0, 'exp': '[The part of speech makes the noun nonsensical]', 'Pronunciation': 'fo', 'How to use': 'fo', 'Japanese': '品詞が名詞の無意味の語を作る', 'English': 'The part of speech makes the noun nonsensical', 'Explanation': 'None[noun]', 'Programming Object': 'Noun.none()', 'Return Object Type': 'Noun', 'Condition': ''},
	'ma':{'ID': '14', 'word': 'ma', 'func': 'Noun.eq', 'arg': 3, 'exp': '[1st_arg and 3rd_arg are equal | 2nd_arg is Verb]', 'Pronunciation': 'ma', 'How to use': 'ma A F B', 'Japanese': 'AはBで(F)ある', 'English': 'A F(Verbs such that A means equal to B) B', 'Explanation': 'Used to express that a thing or concept A is equal to B. And F is a verb such that A means equal to B.', 'Programming Object': 'Noun.eqV(A,F,B)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun'},
	'me':{'ID': '15', 'word': 'me', 'func': 'Noun.haveP', 'arg': 3, 'exp': '[1st_arg has the property that 3rd_arg | 2nd_arg is Verb]', 'Pronunciation': 'me', 'How to use': 'me A F B', 'Japanese': 'AがBという性質が(F)ある', 'English': 'A F(Verbs such that A means equal to B) B', 'Explanation': 'It is used to express that an object or concept A has the property B. And F is a verb such that A means equal to B.', 'Programming Object': 'Noun.havePV(A,F,B)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Modifier'},
	'mi':{'ID': '16', 'word': 'mi', 'func': 'Noun.have', 'arg': 3, 'exp': '[1st_arg owns or has 3rd_arg | 2nd_arg is Verb]', 'Pronunciation': 'mi', 'How to use': 'mi A F B', 'Japanese': 'AはBを所有している/AはBを含んでいる', 'English': 'A have B/A include B', 'Explanation': 'It is used to express that B owns an object or concept A. And F is a verb.', 'Programming Object': 'Noun.have(A,F,B)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun'},
	'mu':{'ID': '17', 'word': 'mu', 'func': 'Noun.belong', 'arg': 3, 'exp': '[1st_arg belongs to has 3rd_arg | 2nd_arg is Verb]', 'Pronunciation': 'mu', 'How to use': 'mu A F B', 'Japanese': 'AはBに所属している/AはBに含まれている', 'English': 'A belongs to B/A is included in B', 'Explanation': 'It is used to express that B belongs to an object or concept A. And F is a verb.', 'Programming Object': 'Noun.belong(A,F,B)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun'},
	'mo':{'ID': '18', 'word': 'mo', 'func': 'Noun.gt', 'arg': 4, 'exp': '[1st_arg is more 3rd_arg than 4th_arg | 2nd_arg is Verb]', 'Pronunciation': 'mo', 'How to use': 'mo A F B C', 'Japanese': 'AはCより（Bという比較基準で）大きい', 'English': 'A is more B than C', 'Explanation': "Used to express comparative expressions between A and C. It thereby means 'A is more B than C'. And F is a verb.", 'Programming Object': 'Noun.gt(A,F,B,C)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Modifier AND type(C)==Noun'},
	'ta':{'ID': '19', 'word': 'ta', 'func': 'Noun.do', 'arg': 2, 'exp': '[1st_arg : Subject | 2nd_arg : Verb]', 'Pronunciation': 'ta', 'How to use': 'ta A F', 'Japanese': 'AはF（～する）', 'English': 'A F(do)', 'Explanation': 'It is used to indicate that an actor called A performs an action called F.', 'Programming Object': 'Noun.do(A,F)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb'},
	'te':{'ID': '20', 'word': 'te', 'func': 'Noun.doT', 'arg': 3, 'exp': '[1st_arg : Subject | 2nd_arg : Verb | 3rd_arg : Object]', 'Pronunciation': 'te', 'How to use': 'te A F B', 'Japanese': 'AはBをF（～する）', 'English': 'A F(do) B', 'Explanation': 'It is used to express that an actor called A performs an action called F on an object called B.', 'Programming Object': 'Noun.doT(A,F,B)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun'},
	'ti':{'ID': '21', 'word': 'ti', 'func': 'Noun.give', 'arg': 4, 'exp': '[1st_arg : Subject | 2nd_arg : Verb | 3rd_arg : Indirect Object | 4th_arg : Direct Object]', 'Pronunciation': 'ti', 'How to use': 'ti A F B C', 'Japanese': 'AはBにCをF（～与える）', 'English': 'A F(give) B C', 'Explanation': 'It is used to describe the action of an actor, A, performing an action, F, on an object, C, towards an object, B.', 'Programming Object': 'Noun.give(A,F,B,C)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun AND type(C)==Noun'},
	'tu':{'ID': '22', 'word': 'tu', 'func': 'Noun.makeN', 'arg': 4, 'exp': '[1st_arg : Subject | 2nd_arg : Verb | 3rd_arg : Object | 4th_arg : Complement(Noun)]', 'Pronunciation': 'tu', 'How to use': 'tu A F B C', 'Japanese': 'AはBをCの状態にF（～する）', 'English': 'A F(make) B C[Noun]', 'Explanation': 'It is used to express that an actor called A performs an action called F in order to make an object called B have the property C.', 'Programming Object': 'Noun.makeN(A,F,B,C)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun AND type(C)==Noun'},
	'to':{'ID': '23', 'word': 'to', 'func': 'Noun.makeM', 'arg': 4, 'exp': '[1st_arg : Subject | 2nd_arg : Verb | 3rd_arg : Object | 4th_arg : Complement(Modifier)]', 'Pronunciation': 'to', 'How to use': 'to A F B C', 'Japanese': 'AはBをCの状態にF（～する）', 'English': 'A F(make) B C[Modifier]', 'Explanation': 'It is used to express that an actor called A performs an action called F in order to make an object called B have the property C.', 'Programming Object': 'Noun.makeM(A,F,B,C)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun AND type(C)==Modifier'},
	'da':{'ID': '24', 'word': 'da', 'func': 'Phrase.interrogative', 'arg': 1, 'exp': '[Make the 1st_arg phrase interrogative]', 'Pronunciation': 'da', 'How to use': 'da A', 'Japanese': 'A（～ですか）[疑問]', 'English': 'A(interrogative form)', 'Explanation': 'Make the phrase A into a question.', 'Programming Object': 'Phrase.interrogative(A)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Phrase'},
	'de':{'ID': '25', 'word': 'de', 'func': 'Phrase.imperative', 'arg': 1, 'exp': '[Make the 1st_arg phrase imperative]', 'Pronunciation': 'de', 'How to use': 'de A', 'Japanese': 'A（～しろ）[命令]', 'English': 'A(imperative form)', 'Explanation': 'Make the phrase A an imperative.', 'Programming Object': 'Phrase.imperative(A)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Phrase'},
	'di':{'ID': '26', 'word': 'di', 'func': 'Phrase.past', 'arg': 1, 'exp': '[Make the 1st_arg phrase past tense]', 'Pronunciation': 'di', 'How to use': 'di A', 'Japanese': 'A（～した）[過去]', 'English': 'A(did)', 'Explanation': 'Make the phrase A into a sentence expressing the past.', 'Programming Object': 'Phrase.past(A)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Phrase'},
	'du':{'ID': '27', 'word': 'du', 'func': 'Phrase.future', 'arg': 1, 'exp': '[Make the 1st_arg phrase past tense]', 'Pronunciation': 'du', 'How to use': 'du A', 'Japanese': 'A（～するだろう/する予定である）[未来]', 'English': 'A(will do / be going to do)', 'Explanation': 'Make the phrase A into a future or scheduled sentence.', 'Programming Object': 'Phrase.future(A)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Phrase'},
	'sa':{'ID': '28', 'word': 'sa', 'func': 'Verb', 'arg': 1, 'exp': '[The act 1st_arg exists]', 'Pronunciation': 'sa', 'How to use': 'sa A', 'Japanese': 'A（～する）行為が存在する', 'English': 'There is an act of A', 'Explanation': 'It is used to express the existence of the action A.', 'Programming Object': 'Verb(A)', 'Return Object Type': 'Verb', 'Condition': ''},
	'si':{'ID': '29', 'word': 'si', 'func': 'Verb.M2V', 'arg': 1, 'exp': '[Make verbs from 1st_arg]', 'Pronunciation': 'si', 'How to use': 'si A', 'Japanese': '修飾語から動詞に変換する', 'English': 'Converting from modifiers to verbs.', 'Explanation': 'Make verbs from A [modifier].', 'Programming Object': 'Verb.M2V(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Modifier'},
	'su':{'ID': '30', 'word': 'su', 'func': 'Verb.N2V', 'arg': 1, 'exp': '[Make verbs from 1st_arg]', 'Pronunciation': 'su', 'How to use': 'su A', 'Japanese': '名詞から動詞に変換する', 'English': 'Converting from nouns to verbs.', 'Explanation': 'Make verbs from A [noun].', 'Programming Object': 'Verb.N2V(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Noun'},
	'so':{'ID': '31', 'word': 'so', 'func': 'Verb.none', 'arg': 0, 'exp': '[The part of speech makes the verb nonsensical]', 'Pronunciation': 'so', 'How to use': 'so', 'Japanese': '品詞が動詞の無意味の語を作る', 'English': 'The part of speech makes the verb nonsensical', 'Explanation': 'None[verb]', 'Programming Object': 'Verb.none()', 'Return Object Type': 'Verb', 'Condition': ''},
	'na':{'ID': '32', 'word': 'na', 'func': 'Verb.add', 'arg': 2, 'exp': '[Adding the meaning of 2nd_arg to 1st_arg]', 'Pronunciation': 'na', 'How to use': 'na A B', 'Japanese': 'A（～する）にB（～く/～に）[副詞]という意味を付加する', 'English': 'Adding the meaning of B to A [verb]', 'Explanation': 'Used to add the meaning B to the action A.', 'Programming Object': 'Verb.add(A,B)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb AND type(B)==Modifier'},
	'ne':{'ID': '33', 'word': 'ne', 'func': 'Verb.passive', 'arg': 1, 'exp': '[Make the 1st_arg phrase passive]', 'Pronunciation': 'ne', 'How to use': 'ne A', 'Japanese': 'A（～される）[受動]', 'English': 'A(be done)', 'Explanation': 'Make the act A passive.', 'Programming Object': 'Verb.passive(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'ni':{'ID': '34', 'word': 'ni', 'func': 'Verb.progressive', 'arg': 1, 'exp': '[Make the 1st_arg phrase progressive]', 'Pronunciation': 'ni', 'How to use': 'ni A', 'Japanese': 'A（～している）[継続]', 'English': 'A(be doing)', 'Explanation': 'The act A is made into a form that expresses continuity or persistence.', 'Programming Object': 'Verb.progressive(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'nu':{'ID': '35', 'word': 'nu', 'func': 'Verb.perfective', 'arg': 1, 'exp': '[Make the 1st_arg phrase perfective]', 'Pronunciation': 'nu', 'How to use': 'nu A', 'Japanese': 'A（～したことのある）[経験/完了/結果/継続]', 'English': 'A(have done)', 'Explanation': 'Make a form that expresses the result or experience of completing the act of A.', 'Programming Object': 'Verb.perfective(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'la':{'ID': '36', 'word': 'la', 'func': 'Modifier', 'arg': 1, 'exp': '[The modifier 1st_arg exists]', 'Pronunciation': 'la', 'How to use': 'la A', 'Japanese': 'A（～な/～の/～に/～く）[形容詞/副詞]という修飾語が存在する', 'English': 'There is a modifier [adjective/adverb] called A', 'Explanation': 'It is used to express the existence of the modifier A.', 'Programming Object': 'Modifier(A)', 'Return Object Type': 'Modifier', 'Condition': 'type(A)==Verb'},
	'li':{'ID': '37', 'word': 'li', 'func': 'Modifier.N2M', 'arg': 1, 'exp': '[Make modifiers from 1st_arg]', 'Pronunciation': 'li', 'How to use': 'li A', 'Japanese': 'A（～の/～に/～で）', 'English': '(of/in/at/on/by/with etc.) A', 'Explanation': 'Make modifiers from A [noun].', 'Programming Object': 'Modifier.N2M(A)', 'Return Object Type': 'Modifier', 'Condition': 'type(A)==Noun'},
	'lu':{'ID': '38', 'word': 'lu', 'func': 'Modifier.V2M', 'arg': 1, 'exp': '[Make modifiers from 1st_arg]', 'Pronunciation': 'lu', 'How to use': 'lu A', 'Japanese': '動詞から修飾語に変換する', 'English': 'Converting verbs to modifiers.', 'Explanation': 'Make modifiers from A [verb].', 'Programming Object': 'Modifier.V2M(A)', 'Return Object Type': 'Modifier', 'Condition': 'type(A)==Verb'},
	'lo':{'ID': '39', 'word': 'lo', 'func': 'Modifier.none', 'arg': 0, 'exp': '[The part of speech makes the modifier nonsensical]', 'Pronunciation': 'lo', 'How to use': 'lo', 'Japanese': '品詞が修飾語の無意味の語を作る', 'English': 'The part of speech makes the modifier nonsensical', 'Explanation': 'None[modifier]', 'Programming Object': 'Modifier.none()', 'Return Object Type': 'Modifier', 'Condition': ''},
	'ka':{'ID': '40', 'word': 'ka', 'func': 'Modifier.add', 'arg': 2, 'exp': '[Adding the meaning of 2nd_arg to 1st_arg]', 'Pronunciation': 'ka', 'How to use': 'ka A B', 'Japanese': 'AにB[副詞]という意味を付加する', 'English': 'Adding the meaning of B to A [modifier]', 'Explanation': 'Used to add the meaning B to the modifier A.', 'Programming Object': 'Modifier.add(A,B)', 'Return Object Type': 'Modifier', 'Condition': 'type(A)==Modifier AND type(B)==Modifier'},
	'ke':{'ID': '41', 'word': 'ke', 'func': 'Modifier.Neg', 'arg': 1, 'exp': '[not 1st_arg]', 'Pronunciation': 'ke', 'How to use': 'ke A', 'Japanese': 'Aでなく', 'English': 'not A', 'Explanation': 'The degree of the adjective is negatively normal for a given adjective. In the original sense, "small". For example, this function can express \'bad\' for \'good\'.', 'Programming Object': 'Modifier.Neg(A)', 'Return Object Type': 'Modifier', 'Condition': 'type(A)==Modifier'},
	'pan':{'ID': '42', 'word': 'pan', 'func': 'DeterminerN.biology', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some kind of person or creature']", 'Pronunciation': 'pan', 'How to use': 'pan A', 'Japanese': '名詞を「Aが何らかの人や生物」と限定する', 'English': "Limit nouns to 'A is some kind of person or creature'", 'Explanation': 'Person or creature', 'Programming Object': 'DeterminerN.biology(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'pen':{'ID': '43', 'word': 'pen', 'func': 'DeterminerN.thing', 'arg': 1, 'exp': "[Limit nouns to '1st_argi s some object or concept']", 'Pronunciation': 'pen', 'How to use': 'pen A', 'Japanese': '名詞を「Aが何らかの物や概念」と限定する', 'English': "Limit nouns to 'A is some object or concept'", 'Explanation': 'Object or concept', 'Programming Object': 'DeterminerN.thing(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'pin':{'ID': '44', 'word': 'pin', 'func': 'DeterminerN.time', 'arg': 1, 'exp': "[Limit a noun to '1st_arg is some time']", 'Pronunciation': 'pin', 'How to use': 'pin A', 'Japanese': '名詞を「Aが何らかの時間」と限定する', 'English': "Limit a noun to 'A is some time'", 'Explanation': 'Time', 'Programming Object': 'DeterminerN.time(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'pun':{'ID': '45', 'word': 'pun', 'func': 'DeterminerN.place', 'arg': 1, 'exp': "[Limit a noun to '1st_arg is some place']", 'Pronunciation': 'pun', 'How to use': 'pun A', 'Japanese': '名詞を「Aが何らかの場所」と限定する', 'English': "Limit a noun to 'A is some place'", 'Explanation': 'Place', 'Programming Object': 'DeterminerN.place(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'pon':{'ID': '46', 'word': 'pon', 'func': 'DeterminerN.reason', 'arg': 1, 'exp': "[Limit a noun to '1st_arg is some reason']", 'Pronunciation': 'pon', 'How to use': 'pon A', 'Japanese': '名詞を「Aが何らかの理由」と限定する', 'English': "Limit a noun to 'A is some reason'", 'Explanation': 'Reason', 'Programming Object': 'DeterminerN.reason(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'ban':{'ID': '47', 'word': 'ban', 'func': 'DeterminerN.method', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some way or tool or means']", 'Pronunciation': 'ban', 'How to use': 'ban A', 'Japanese': '名詞を「Aが何らかの方法や道具や手段」と限定する', 'English': "Limit nouns to 'A is some way or tool or means'", 'Explanation': 'Ways, tools or means', 'Programming Object': 'DeterminerN.method(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'ben':{'ID': '48', 'word': 'ben', 'func': 'DeterminerN.human', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some kind of human being']", 'Pronunciation': 'ben', 'How to use': 'ben A', 'Japanese': '名詞を「Aが何らかの人間」と限定する', 'English': "Limit nouns to 'A is some kind of human being'", 'Explanation': 'Human', 'Programming Object': 'DeterminerN.human(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'bin':{'ID': '49', 'word': 'bin', 'func': 'DeterminerN.animal', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some kind of animal']", 'Pronunciation': 'bin', 'How to use': 'bin A', 'Japanese': '名詞を「Aが何らかの動物」と限定する', 'English': "Limit nouns to 'A is some kind of animal'", 'Explanation': 'Animal', 'Programming Object': 'DeterminerN.animal(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'bun':{'ID': '50', 'word': 'bun', 'func': 'DeterminerN.plant', 'arg': 1, 'exp': "[Limit the noun to '1st_arg is some kind of plant']", 'Pronunciation': 'bun', 'How to use': 'bun A', 'Japanese': '名詞を「Aが何らかの植物」と限定する', 'English': "Limit the noun to 'A is some kind of plant'", 'Explanation': 'Plant', 'Programming Object': 'DeterminerN.plant(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'bon':{'ID': '51', 'word': 'bon', 'func': 'DeterminerN.material', 'arg': 1, 'exp': "[Limit the noun to '1st_arg is some kind of material']", 'Pronunciation': 'bon', 'How to use': 'bon A', 'Japanese': '名詞を「Aが何らかの材料」と限定する', 'English': "Limit the noun to 'A is some kind of material'", 'Explanation': 'Material', 'Programming Object': 'DeterminerN.material(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'fan':{'ID': '52', 'word': 'fan', 'func': 'DeterminerN.start', 'arg': 1, 'exp': "[Limit a noun to '1st_arg is some starting point']", 'Pronunciation': 'fan', 'How to use': 'fan A', 'Japanese': '名詞を「Aが何らかの始点」と限定する', 'English': "Limit a noun to 'A is some starting point'", 'Explanation': "Similar meaning to 'from' in English  when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.start(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'fen':{'ID': '53', 'word': 'fen', 'func': 'DeterminerN.end', 'arg': 1, 'exp': "[Limit a noun to '1st_arg is some end point']", 'Pronunciation': 'fen', 'How to use': 'fen A', 'Japanese': '名詞を「Aが何らかの終点」と限定する', 'English': "Limit a noun to 'A is some end point'", 'Explanation': "Similar meaning to 'to' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.end(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'fin':{'ID': '54', 'word': 'fin', 'func': 'DeterminerN.section', 'arg': 1, 'exp': "[Limit a noun to '1st_arg is some interval']", 'Pronunciation': 'fin', 'How to use': 'fin A', 'Japanese': '名詞を「Aが何らかの区間」と限定する', 'English': "Limit a noun to 'A is some interval'", 'Explanation': "Similar meaning to 'between' or 'among' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.section(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'fun':{'ID': '55', 'word': 'fun', 'func': 'DeterminerN.In', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is in some']", 'Pronunciation': 'fun', 'How to use': 'fun A', 'Japanese': '名詞を「Aが何らかの中」と限定する', 'English': "Limit nouns to 'A is in some'", 'Explanation': "Similar meaning to 'in' or 'into' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.In(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'fon':{'ID': '56', 'word': 'fon', 'func': 'DeterminerN.Out', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is out some']", 'Pronunciation': 'fon', 'How to use': 'fon A', 'Japanese': '名詞を「Aが何らかの外」と限定する', 'English': "Limit nouns to 'A is out some'", 'Explanation': "Similar meaning to 'out' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.Out(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'man':{'ID': '57', 'word': 'man', 'func': 'DeterminerN.above', 'arg': 1, 'exp': "[Limit nouns to '1st_arg above some']", 'Pronunciation': 'man', 'How to use': 'man A', 'Japanese': '名詞を「Aが何らかの上」と限定する', 'English': "Limit nouns to 'A above some'", 'Explanation': "Similar meaning to 'over', 'above' or 'on' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.above(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'men':{'ID': '58', 'word': 'men', 'func': 'DeterminerN.below', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is below some']", 'Pronunciation': 'men', 'How to use': 'men A', 'Japanese': '名詞を「Aが何らかの下」と限定する', 'English': "Limit nouns to 'A is below some'", 'Explanation': "Similar meaning to 'under', 'below' or 'on' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.below(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'min':{'ID': '59', 'word': 'min', 'func': 'DeterminerN.on', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is grounded to something']", 'Pronunciation': 'min', 'How to use': 'min A', 'Japanese': '名詞を「Aが何らかに接地している」と限定する', 'English': "Limit nouns to 'A is grounded to something'", 'Explanation': "Similar meaning to 'on' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.on(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'mun':{'ID': '60', 'word': 'mun', 'func': 'DeterminerN.right', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some right']", 'Pronunciation': 'mun', 'How to use': 'mun A', 'Japanese': '名詞を「Aが何らかの右」と限定する', 'English': "Limit nouns to 'A is some right'", 'Explanation': "Similar meaning to 'right of' or 'on' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.right(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'mon':{'ID': '61', 'word': 'mon', 'func': 'DeterminerN.left', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some left']", 'Pronunciation': 'mon', 'How to use': 'mon A', 'Japanese': '名詞を「Aが何らかの左」と限定する', 'English': "Limit nouns to 'A is some left'", 'Explanation': "Similar meaning to 'left of' or 'on' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.left(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'tan':{'ID': '62', 'word': 'tan', 'func': 'DeterminerN.affect', 'arg': 1, 'exp': "[Limit nouns to 'something that 1st_arg affects in some way']", 'Pronunciation': 'tan', 'How to use': 'tan A', 'Japanese': '名詞を「Aが何らかの影響を与えるものや関連していること」と限定する', 'English': "Limit the noun to 'something that A affects or is related to in some way'", 'Explanation': "Similar meaning to 'by', 'about' or 'for' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.affect(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'ten':{'ID': '63', 'word': 'ten', 'func': 'DeterminerN.affected', 'arg': 1, 'exp': "[Limit noun to 'something that 1st_arg is affected by in some way']", 'Pronunciation': 'ten', 'How to use': 'ten A', 'Japanese': '名詞を「Aが何らかの影響が与えられるもの」と限定する', 'English': "Limit noun to 'something that A is affected by in some way'", 'Explanation': "Similar meaning to 'with' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.affected(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'tin':{'ID': '64', 'word': 'tin', 'func': 'DeterminerN.near', 'arg': 1, 'exp': "[Limit the noun to 'something that 1st_arg is near or related to']", 'Pronunciation': 'tin', 'How to use': 'tin A', 'Japanese': '名詞を「Aが近くにあるものや関連しているもの」と限定する', 'English': "Limit the noun to 'something that A is near or related to'.", 'Explanation': "Similar meaning to 'near', 'about', 'with' or 'by' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.near(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'tun':{'ID': '65', 'word': 'tun', 'func': 'DeterminerN.move', 'arg': 1, 'exp': "Limit nouns to those with motion, such as '1st_arg crosses', '1st_arg passes' or '1st_arg heads'.", 'Pronunciation': 'tun', 'How to use': 'tun A', 'Japanese': '名詞を「Aが横切る」や「Aが通る」「Aが向かう」と動きのあるものに限定する', 'English': "Limit nouns to those with motion, such as 'A crosses', 'A passes' or 'A heads'.", 'Explanation': "Similar meaning to 'to', 'through', 'around', 'into', 'across', 'along', 'over', 'under', 'up', 'down' or 'past' etc. in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.move(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'ton':{'ID': '66', 'word': 'ton', 'func': 'DeterminerN.stop', 'arg': 1, 'exp': '[Limit nouns to those with static]', 'Pronunciation': 'ton', 'How to use': 'ton A', 'Japanese': '名詞を静止のあるものに限定する', 'English': 'Limit nouns to those with static', 'Explanation': "Similar meaning to 'in', 'at'  or 'on' etc. in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.stop(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'dan':{'ID': '67', 'word': 'dan', 'func': 'DeterminerN.all', 'arg': 1, 'exp': "[Limit the noun to 'all 1st_arg'.]", 'Pronunciation': 'dan', 'How to use': 'dan A', 'Japanese': '名詞を「すべてのA」と限定する', 'English': "Limit the noun to 'all A'", 'Explanation': 'All', 'Programming Object': 'DeterminerN.all(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'den':{'ID': '68', 'word': 'den', 'func': 'DeterminerN.many', 'arg': 1, 'exp': "[Limit the noun to 'many 1st_arg']", 'Pronunciation': 'den', 'How to use': 'den A', 'Japanese': '名詞を「多くのA」と限定する', 'English': "Limit the noun to 'many A', 'much A' or 'a lot of A'", 'Explanation': 'Many', 'Programming Object': 'DeterminerN.many(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'din':{'ID': '69', 'word': 'din', 'func': 'DeterminerN.some', 'arg': 1, 'exp': "[Limit the noun to 'some 1st_arg']", 'Pronunciation': 'din', 'How to use': 'din A', 'Japanese': '名詞を「いくつかのA」と限定する', 'English': "Limit the noun to 'some A', 'a few A' or 'several A'", 'Explanation': 'Some', 'Programming Object': 'DeterminerN.some(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'dun':{'ID': '70', 'word': 'dun', 'func': 'DeterminerN.one', 'arg': 1, 'exp': "[Limit the noun to 'any 1st_arg']", 'Pronunciation': 'dun', 'How to use': 'dun A', 'Japanese': '名詞を「ある（一つの）A」と限定する', 'English': "Limit the noun to 'a certain A', 'one certain A'.", 'Explanation': 'One', 'Programming Object': 'DeterminerN.one(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'don':{'ID': '71', 'word': 'don', 'func': 'DeterminerN.plural', 'arg': 1, 'exp': '[Making nouns plural]', 'Pronunciation': 'don', 'How to use': 'don A', 'Japanese': '名詞を複数形にする', 'English': 'Making nouns plural', 'Explanation': 'Plural', 'Programming Object': 'DeterminerN.plural(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'san':{'ID': '72', 'word': 'san', 'func': 'DeterminerN.stressed', 'arg': 1, 'exp': '[1st_arg as stressed form]', 'Pronunciation': 'san', 'How to use': 'san A', 'Japanese': '名詞を強調形する', 'English': 'Stressed form of nouns.', 'Explanation': 'It is added to the noun that is most emphasised in a given sentence. However, it is usually not added to the subject. It is particularly useful when a noun is explained by a relative pronoun and a subordinate clause, where the noun being explained is a noun other than the genitive of the subordinate clause.', 'Programming Object': 'DeterminerN.stressed(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'sen':{'ID': '73', 'word': 'sen', 'func': 'DeterminerN.possessive', 'arg': 1, 'exp': '[Make 1st_arg a possessive pronoun]', 'Pronunciation': 'sen', 'How to use': 'sen A', 'Japanese': '所有代名詞を作成する', 'English': 'Creating possessive pronouns', 'Explanation': 'Make A a possessive pronoun', 'Programming Object': 'DeterminerN.possessive(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'sin':{'ID': '74', 'word': 'sin', 'func': 'DeterminerN.reflexive', 'arg': 1, 'exp': '[Make 1st_arg a reflexive pronoun]', 'Pronunciation': 'sin', 'How to use': 'sin A', 'Japanese': '再帰代名詞を作成する', 'English': 'Creating recursive pronouns', 'Explanation': 'Make A a reflexive pronoun', 'Programming Object': 'DeterminerN.reflexive(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'sun':{'ID': '75', 'word': 'sun', 'func': 'DeterminerN.etc', 'arg': 1, 'exp': "[Limit nouns to '1st_arg etc.']", 'Pronunciation': 'sun', 'How to use': 'sun A', 'Japanese': '名詞を「Aなど」と限定する', 'English': "Limit nouns to 'A etc.'", 'Explanation': 'Used where there are other.', 'Programming Object': 'DeterminerN.etc(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'son':{'ID': '76', 'word': 'son', 'func': 'DeterminerN.abstract', 'arg': 1, 'exp': '[Abstracting nouns in 1st_arg]', 'Pronunciation': 'son', 'How to use': 'son A', 'Japanese': '～的/～のようなもの/名詞を抽象化する', 'English': 'something like A/Abstracting nouns', 'Explanation': 'DeterminerN.abstract(Noun.M2N(Modifier(A))) to represent an abstract concept for A. Modifier.N2M(DeterminerN.abstract(A)) to make A a modifier of the figurative expression.', 'Programming Object': 'DeterminerN.abstract(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'nan':{'ID': '77', 'word': 'nan', 'func': 'DeterminerN.front', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is in front of some space']", 'Pronunciation': 'nan', 'How to use': 'nan A', 'Japanese': '名詞を「Aが何らかの空間的に前」と限定する', 'English': "Limit nouns to 'A is in front of some space'", 'Explanation': "Similar meaning to 'in front of' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.front(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'nen':{'ID': '78', 'word': 'nen', 'func': 'DeterminerN.behind', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is behind in some space']", 'Pronunciation': 'nen', 'How to use': 'nen A', 'Japanese': '名詞を「Aが何らかの空間的に後ろ」と限定する', 'English': "Limit nouns to 'A is behind in some space'", 'Explanation': "Similar meaning to 'behind' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.behind(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'nun':{'ID': '79', 'word': 'nun', 'func': 'DeterminerN.future', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some time in the future']", 'Pronunciation': 'nun', 'How to use': 'nun A', 'Japanese': '名詞を「Aが何らかの時間的に未来」と限定する', 'English': "Limit nouns to 'A is some time in the future'", 'Explanation': "Similar meaning to 'after' in English regarding time.", 'Programming Object': 'DeterminerN.future(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'non':{'ID': '80', 'word': 'non', 'func': 'DeterminerN.past', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some time in the past']", 'Pronunciation': 'non', 'How to use': 'non A', 'Japanese': '名詞を「Aが何らかの時間的に過去」と限定する', 'English': "Limit nouns to 'A is some time in the past'", 'Explanation': "Similar meaning to 'before' and 'ago' in English regarding time.", 'Programming Object': 'DeterminerN.past(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'lan':{'ID': '81', 'word': 'lan', 'func': 'DeterminerN.male', 'arg': 1, 'exp': "[Limit noun to '1st_arg is some male']", 'Pronunciation': 'lan', 'How to use': 'lan A', 'Japanese': '名詞を「Aが何らかの男性や雄」と限定する', 'English': "Limit noun to 'A is some male'", 'Explanation': 'Male', 'Programming Object': 'DeterminerN.male(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'len':{'ID': '82', 'word': 'len', 'func': 'DeterminerN.female', 'arg': 1, 'exp': "[Limit the noun to '1st_arg is some female']", 'Pronunciation': 'len', 'How to use': 'len A', 'Japanese': '名詞を「Aが何らかの女性や雌」と限定する', 'English': "Limit the noun to 'A is some female'", 'Explanation': 'Female', 'Programming Object': 'DeterminerN.female(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'ga':{'ID': '83', 'word': 'ga', 'func': 'Pronoun.I', 'arg': 0, 'exp': '[Represents first-person pronouns]', 'Pronunciation': 'ga', 'How to use': 'ga', 'Japanese': '私', 'English': 'I', 'Explanation': 'Represents one-person pronouns(Person).', 'Programming Object': 'Pronoun.I()', 'Return Object Type': 'Pronoun', 'Condition': ''},
	'ge':{'ID': '84', 'word': 'ge', 'func': 'Pronoun.you', 'arg': 0, 'exp': '[Represents second-person pronouns]', 'Pronunciation': 'ge', 'How to use': 'ge', 'Japanese': 'あなた', 'English': 'you', 'Explanation': 'Represents two-person pronouns(Person).', 'Programming Object': 'Pronoun.you()', 'Return Object Type': 'Pronoun', 'Condition': ''},
	'gi':{'ID': '85', 'word': 'gi', 'func': 'Pronoun.he', 'arg': 0, 'exp': '[Represents third-person pronouns]', 'Pronunciation': 'gi', 'How to use': 'gi', 'Japanese': '彼/彼女/それ', 'English': 'he/she/it', 'Explanation': 'Represents third-person pronouns.', 'Programming Object': 'Pronoun.he()', 'Return Object Type': 'Pronoun', 'Condition': ''},
	'gu':{'ID': '86', 'word': 'gu', 'func': 'Pronoun.proximal', 'arg': 0, 'exp': '[Represents a proximal pronoun]', 'Pronunciation': 'gu', 'How to use': 'gu', 'Japanese': 'これ', 'English': 'this', 'Explanation': 'Represents a proximal pronoun.', 'Programming Object': 'Pronoun.proximal()', 'Return Object Type': 'Pronoun', 'Condition': ''},
	'go':{'ID': '87', 'word': 'go', 'func': 'Pronoun.distal', 'arg': 0, 'exp': '[Represents a distal pronoun]', 'Pronunciation': 'go', 'How to use': 'go', 'Japanese': 'それ/あれ', 'English': 'that', 'Explanation': 'Represents a distal pronoun.', 'Programming Object': 'Pronoun.distal()', 'Return Object Type': 'Pronoun', 'Condition': ''},
	'wa':{'ID': '88', 'word': 'wa', 'func': 'Pronoun.interrogative', 'arg': 0, 'exp': '[Represents an interrogative determiners]', 'Pronunciation': 'wa', 'How to use': 'wa', 'Japanese': 'どれ', 'English': 'what', 'Explanation': 'Represents an interrogative determiners.', 'Programming Object': 'Pronoun.interrogative()', 'Return Object Type': 'Pronoun', 'Condition': ''},
	'we':{'ID': '89', 'word': 'we', 'func': 'Pronoun.indefinite', 'arg': 0, 'exp': '[Represents an indefinite pronouns]', 'Pronunciation': 'we', 'How to use': 'we', 'Japanese': 'どれか', 'English': 'something', 'Explanation': 'Represents an indefinite pronouns.', 'Programming Object': 'Pronoun.indefinite()', 'Return Object Type': 'Pronoun', 'Condition': ''},
	'kan':{'ID': '90', 'word': 'kan', 'func': 'WordV.create', 'arg': 0, 'exp': '[Produces something]', 'Pronunciation': 'kan', 'How to use': 'kan', 'Japanese': '生み出す/作る/産む', 'English': 'create/make/bear', 'Explanation': "The original meaning is 'Produces something'.", 'Programming Object': 'WordV.create()', 'Return Object Type': 'Verb', 'Condition': ''},
	'ken':{'ID': '91', 'word': 'ken', 'func': 'WordV.destroy', 'arg': 0, 'exp': '[Destroys something]', 'Pronunciation': 'ken', 'How to use': 'ken', 'Japanese': '破壊する/壊す/死ぬ', 'English': 'destroy/break/die', 'Explanation': "The original meaning is 'Destroys something'.", 'Programming Object': 'WordV.destroy()', 'Return Object Type': 'Verb', 'Condition': ''},
	'kin':{'ID': '92', 'word': 'kin', 'func': 'WordV.act', 'arg': 0, 'exp': '[Someone acts]', 'Pronunciation': 'kin', 'How to use': 'kin', 'Japanese': '行動する/動く/実行する/歩く/働く', 'English': 'act/move/do/walk/work', 'Explanation': "The original meaning is 'Someone acts'.", 'Programming Object': 'WordV.act()', 'Return Object Type': 'Verb', 'Condition': ''},
	'kun':{'ID': '93', 'word': 'kun', 'func': 'WordV.turn', 'arg': 0, 'exp': '[Something turns]', 'Pronunciation': 'kun', 'How to use': 'kun', 'Japanese': '回る/回転する/急ぐ/走る', 'English': 'turn/rotate/hurry/run', 'Explanation': "The original meaning is 'Something turns'.", 'Programming Object': 'WordV.turn()', 'Return Object Type': 'Verb', 'Condition': ''},
	'kon':{'ID': '94', 'word': 'kon', 'func': 'WordV.receive', 'arg': 0, 'exp': '[Receive something]', 'Pronunciation': 'kon', 'How to use': 'kon', 'Japanese': '感じ取る/受信する/受け取る/入れる/摂取する/取得する/得る/習う/聞く/見る/食べる/飲む', 'English': 'receive/accept/acquire/get/learn/hear/see/listen/look at/watch/eat/drink', 'Explanation': "The original meaning is 'Receive something'.", 'Programming Object': 'WordV.receive()', 'Return Object Type': 'Verb', 'Condition': ''},
	'gan':{'ID': '95', 'word': 'gan', 'func': 'WordV.stimulate', 'arg': 0, 'exp': '[Something stimulates something]', 'Pronunciation': 'gan', 'How to use': 'gan', 'Japanese': '発する/発信する/発射する/出す/送信する/送る/教える/刺激する/言う/話す/攻撃する', 'English': 'emit/transmit/put out/send/give/teach/stimulate/say/speak/attack', 'Explanation': "The original meaning is 'Something stimulates something'.", 'Programming Object': 'WordV.stimulate()', 'Return Object Type': 'Verb', 'Condition': ''},
	'gen':{'ID': '96', 'word': 'gen', 'func': 'WordV.exist', 'arg': 0, 'exp': '[Something exists]', 'Pronunciation': 'gen', 'How to use': 'gen', 'Japanese': 'ある/いる/存在する/生きている/住んでいる/留まる/止まっている/休む', 'English': 'be/exist/live/stay/be stopping/get rest', 'Explanation': "The original meaning is 'the state in which something stays and exists’.", 'Programming Object': 'WordV.exist()', 'Return Object Type': 'Verb', 'Condition': ''},
	'gin':{'ID': '97', 'word': 'gin', 'func': 'WordV.use', 'arg': 0, 'exp': '[Something uses something]', 'Pronunciation': 'gin', 'How to use': 'gin', 'Japanese': '使う/使用する', 'English': 'use', 'Explanation': "The original meaning is 'Something uses something'.", 'Programming Object': 'WordV.use()', 'Return Object Type': 'Verb', 'Condition': ''},
	'gun':{'ID': '98', 'word': 'gun', 'func': 'WordV.change', 'arg': 0, 'exp': '[Something changes]', 'Pronunciation': 'gun', 'How to use': 'gun', 'Japanese': '変わる/なる/成長する/移行する/移動する', 'English': 'change/become/grow/transfer', 'Explanation': "The original meaning is 'Something changes'.", 'Programming Object': 'WordV.change()', 'Return Object Type': 'Verb', 'Condition': ''},
	'wan':{'ID': '99', 'word': 'wan', 'func': 'WordM.big', 'arg': 0, 'exp': '[Big]', 'Pronunciation': 'wan', 'How to use': 'wan', 'Japanese': '大きい/長い/広い/高い/多い/重い', 'English': 'big/long/wide/tall/many/heavy/large', 'Explanation': "The original meaning is 'Big'.", 'Programming Object': 'WordM.big()', 'Return Object Type': 'Modifier', 'Condition': ''},
	'wen':{'ID': '100', 'word': 'wen', 'func': 'WordM.near', 'arg': 0, 'exp': '[Near]', 'Pronunciation': 'wen', 'How to use': 'wen', 'Japanese': '近い/親しい/似ている/好きである', 'English': 'near/familiar/close to/similar/like', 'Explanation': "The original meaning is 'Near'.", 'Programming Object': 'WordM.near()', 'Return Object Type': 'Modifier', 'Condition': ''},
	'win':{'ID': '101', 'word': 'win', 'func': 'WordM.good', 'arg': 0, 'exp': '[Good]', 'Pronunciation': 'win', 'How to use': 'win', 'Japanese': '良い/新しい/若い/美しい', 'English': 'good/new/young/beautiful', 'Explanation': "The original meaning is 'Good'.", 'Programming Object': 'WordM.good()', 'Return Object Type': 'Modifier', 'Condition': ''},
	'won':{'ID': '102', 'word': 'won', 'func': 'WordM.bright', 'arg': 0, 'exp': '[Bright]', 'Pronunciation': 'won', 'How to use': 'won', 'Japanese': '明るい/白い/色鮮やかな', 'English': 'bright/white/colourful', 'Explanation': "The original meaning is 'Bright'.", 'Programming Object': 'WordM.bright()', 'Return Object Type': 'Modifier', 'Condition': ''},
	'pas':{'ID': '103', 'word': 'pas', 'func': 'Bool.false', 'arg': 0, 'exp': '[False {Boolean}]', 'Pronunciation': 'pas', 'How to use': 'pas', 'Japanese': '偽', 'English': 'False (Boolean)', 'Explanation': 'Bool type to indicate False. It is a binary zero.', 'Programming Object': 'Bool.false()', 'Return Object Type': 'Bool', 'Condition': ''},
	'pos':{'ID': '104', 'word': 'pos', 'func': 'Bool.true', 'arg': 0, 'exp': '[True {Boolean}]', 'Pronunciation': 'pos', 'How to use': 'pos', 'Japanese': '真', 'English': 'True (Boolean)', 'Explanation': 'Represents a Bool type True. It is a binary number 1.', 'Programming Object': 'Bool.true()', 'Return Object Type': 'Bool', 'Condition': ''},
	'pis':{'ID': '105', 'word': 'pis', 'func': 'Bool.B2N', 'arg': 2, 'exp': '[1st_arg is 2nd_arg {2nd_arg is true or false}]', 'Pronunciation': 'pis', 'How to use': 'pis A B', 'Japanese': 'AはBである（Bは真偽）', 'English': 'A is B (B is true or false)', 'Explanation': 'Assigns true/false to Noun types.', 'Programming Object': 'Bool.B2N(A,B)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun AND type(B)==Bool'},
	'fas':{'ID': '106', 'word': 'fas', 'func': 'BoolList', 'arg': 0, 'exp': '[Create a list of true/false BoolList}]', 'Pronunciation': 'fas', 'How to use': 'fas', 'Japanese': '真偽のリスト（BoolList）を作成する', 'English': 'Create a list of true/false (BoolList)', 'Explanation': 'Creates an empty BoolList, which can be used to manage multiple Bool types.', 'Programming Object': 'BoolList()', 'Return Object Type': 'BoolList', 'Condition': ''},
	'fis':{'ID': '107', 'word': 'fis', 'func': 'BoolList.append', 'arg': 2, 'exp': '[Add one Bool to the end of the BoolList]', 'Pronunciation': 'fis', 'How to use': 'fis A B', 'Japanese': 'BoolListに1つのBoolを末尾に加える', 'English': 'Add one Bool to the end of the BoolList', 'Explanation': 'Add the Bool value B to the end of the BoolList A.', 'Programming Object': 'BoolList.append(A,B)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)==BoolList AND type(B)==Bool'},
	'fos':{'ID': '108', 'word': 'fos', 'func': 'BoolList.add', 'arg': 2, 'exp': '[Combine two BoolLists]', 'Pronunciation': 'fos', 'How to use': 'fos A B', 'Japanese': '2つのBoolListを結合する', 'English': 'Combine two BoolLists', 'Explanation': 'Combines two BoolLists, A and B, and returns them.', 'Programming Object': 'BoolList.add(A,B)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)==BoolList AND type(B)==BoolList'},
	'mas':{'ID': '109', 'word': 'mas', 'func': 'BoolList.twoBit', 'arg': 2, 'exp': '[Create a BoolList consisting of 2 Bool values]', 'Pronunciation': 'mas', 'How to use': 'mas A B', 'Japanese': '2つBoolの値からなるBoolListを作成する', 'English': 'Create a BoolList consisting of 2 Bool values', 'Explanation': 'Create a 2-bit BoolList.', 'Programming Object': 'BoolList.twoBit(A,B)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)==Bool AND type(B)==Bool'},
	'mis':{'ID': '110', 'word': 'mis', 'func': 'BoolList.fourBit', 'arg': 4, 'exp': '[Create a BoolList consisting of 4 Bool values]', 'Pronunciation': 'mis', 'How to use': 'mis A B C D', 'Japanese': '4つBoolの値からなるBoolListを作成する', 'English': 'Create a BoolList consisting of 4 Bool values', 'Explanation': 'Create a 4-bit BoolList.', 'Programming Object': 'BoolList.fourBit(A,B,C,D)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)==Bool AND type(B)==Bool AND type(C)==Bool AND type(D)==Bool'},
	'mos':{'ID': '111', 'word': 'mos', 'func': 'BoolList.byte', 'arg': 8, 'exp': '[Create a BoolList consisting of 8 Bool values]', 'Pronunciation': 'mos', 'How to use': 'mos X1 X2 X3 X4 X5 X6 X7 X8', 'Japanese': '8つBoolの値からなるBoolListを作成する', 'English': 'Create a BoolList consisting of 8 Bool values', 'Explanation': 'Create a 1-byte BoolList.', 'Programming Object': 'BoolList.byte(X1,X2,X3,X4,X5,X6,X7,X8)', 'Return Object Type': 'BoolList', 'Condition': 'type(X1)==Bool AND type(X2)==Bool AND type(X3)==Bool AND type(X4)==Bool AND type(X5)==Bool AND type(X6)==Bool AND type(X7)==Bool AND type(X8)==Bool'},
	'tas':{'ID': '112', 'word': 'tas', 'func': 'BoolList.NaturalNum', 'arg': 1, 'exp': '[BoolList is considered a natural number]', 'Pronunciation': 'tas', 'How to use': 'tas A', 'Japanese': 'BoolListを2進数の自然数とみなす', 'English': 'BoolList is considered a binary natural number', 'Explanation': 'treats a number in BoolList as a natural number.', 'Programming Object': 'BoolList.NaturalNum(A)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)=BoolList'},
	'tes':{'ID': '113', 'word': 'tes', 'func': 'BoolList.Int', 'arg': 1, 'exp': '[BoolList is considered an integer]', 'Pronunciation': 'tes', 'How to use': 'tes A', 'Japanese': 'BoolListを2進数の整数とみなす', 'English': 'BoolList is considered a binary integer', 'Explanation': 'treats a number in BoolList as an integer.', 'Programming Object': 'BoolList.Int(A)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)=BoolList'},
	'tis':{'ID': '114', 'word': 'tis', 'func': 'BoolList.Float', 'arg': 1, 'exp': '[BoolList is considered a floating number]', 'Pronunciation': 'tis', 'How to use': 'tis A', 'Japanese': 'BoolListを2進数の浮動小数とみなす', 'English': 'BoolList is considered a binary floating number', 'Explanation': 'treats a number in BoolList as a floating number.', 'Programming Object': 'BoolList.Float(A)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)=BoolList'},
	'tus':{'ID': '115', 'word': 'tus', 'func': 'BoolList.ASCII', 'arg': 1, 'exp': '[BoolList is considered an ASCII character]', 'Pronunciation': 'tus', 'How to use': 'tus A', 'Japanese': 'BoolListをアスキー文字とみなす', 'English': 'BoolList is considered an ASCII character', 'Explanation': 'treats a number in BoolList as an ASCII character.', 'Programming Object': 'BoolList.ASCII(A)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)=BoolList'},
}