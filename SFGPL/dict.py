SFGPL_DICT_DATA={
	'pa':{'ID': '0', 'word': 'pa', 'func': 'LangObj.NOT', 'arg': 1, 'exp': '[NOT 1st_arg]', 'version': '1.0.0', 'Pronunciation': 'pa', 'How to use': 'pa A', 'Japanese': 'Aでない', 'English': 'not A', 'Explanation': 'Used to express a reversal of meaning, negation, etc. in relation to A.', 'Programming Object': 'LangObj.NOT(A)', 'Return Object Type': 'type(A)', 'Condition': ''},
	'pe':{'ID': '1', 'word': 'pe', 'func': 'LangObj.Because', 'arg': 2, 'exp': '[1st_arg because 2nd_arg]', 'version': '1.0.0', 'Pronunciation': 'pe', 'How to use': 'pe A B', 'Japanese': 'AなぜならばB', 'English': 'A because B', 'Explanation': 'Used to express that there is a reason B for A.', 'Programming Object': 'LangObj.Because(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'pi':{'ID': '2', 'word': 'pi', 'func': 'LangObj.IF', 'arg': 2, 'exp': '[If the condition is 1st_arg, then it is 2nd_arg]', 'version': '1.0.0', 'Pronunciation': 'pi', 'How to use': 'pi A B', 'Japanese': 'もしAならばBである', 'English': 'if A, B', 'Explanation': 'Used to express that, in relation to a condition A, it is B.', 'Programming Object': 'LangObj.IF(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'pu':{'ID': '3', 'word': 'pu', 'func': 'LangObj.So', 'arg': 2, 'exp': '[1st_arg so 2nd_arg]', 'version': '1.0.0', 'Pronunciation': 'pu', 'How to use': 'pu A B', 'Japanese': 'AだからB', 'English': 'A so B', 'Explanation': 'Used to express that B is a proper reason, cause, trigger or condition for a proposition in relation to A.', 'Programming Object': 'LangObj.So(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'po':{'ID': '4', 'word': 'po', 'func': 'LangObj.But', 'arg': 2, 'exp': '[1st_arg but 2nd_arg]', 'version': '1.0.0', 'Pronunciation': 'po', 'How to use': 'po A B', 'Japanese': 'AしかしB', 'English': 'A but B', 'Explanation': 'Used to express that B is a contradiction or conflict in relation to A.', 'Programming Object': 'LangObj.But(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'ba':{'ID': '5', 'word': 'ba', 'func': 'LangObj.AND', 'arg': 2, 'exp': '[1st_arg AND 2nd_arg]', 'version': '1.0.0', 'Pronunciation': 'ba', 'How to use': 'ba A B', 'Japanese': 'AかつB', 'English': 'A and B', 'Explanation': 'Used to express the case where both A and B are true.', 'Programming Object': 'LangObj.AND(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'be':{'ID': '6', 'word': 'be', 'func': 'LangObj.OR', 'arg': 2, 'exp': '[1st_arg AND 2nd_arg]', 'version': '1.0.0', 'Pronunciation': 'be', 'How to use': 'be A B', 'Japanese': 'AまたはB', 'English': 'A or B', 'Explanation': 'Used to express the case where either A or B is true.', 'Programming Object': 'LangObj.OR(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'bi':{'ID': '7', 'word': 'bi', 'func': 'LangObj.IFELSE', 'arg': 3, 'exp': '[If the condition is 1st_arg, then it is 2nd_arg, otherwise it is 3rd_arg]', 'version': '1.0.0', 'Pronunciation': 'bi', 'How to use': 'bi A B C', 'Japanese': 'もしAならばBである，そうでなければCである', 'English': 'If A, B, otherwise C', 'Explanation': 'Used to express that, with respect to a condition A, B is true. And is used to express that, with respect to a condition other than A, it is C.', 'Programming Object': 'LangObj.IFELSE(A,B,C)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B) AND type(A)==type(C)'},
	'bu':{'ID': '8', 'word': 'bu', 'func': 'LangObj.NAND', 'arg': 2, 'exp': '[1st_arg NAND 2nd_arg]', 'version': '1.0.0', 'Pronunciation': 'bu', 'How to use': 'bu A B', 'Japanese': 'AかつBでない', 'English': 'A nand B', 'Explanation': "Used to express the case where both A and B aren't true.", 'Programming Object': 'LangObj.NAND(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'bo':{'ID': '9', 'word': 'bo', 'func': 'LangObj.NOR', 'arg': 2, 'exp': '[1st_arg NOR 2nd_arg]', 'version': '1.0.0', 'Pronunciation': 'bo', 'How to use': 'bo A B', 'Japanese': 'AまたはBでない', 'English': 'A nor B', 'Explanation': "Used to express the case where either A or B isn't true.", 'Programming Object': 'LangObj.NOR(A,B)', 'Return Object Type': 'type(A)', 'Condition': 'type(A)==type(B)'},
	'fa':{'ID': '10', 'word': 'fa', 'func': 'Noun', 'arg': 1, 'exp': '[1st_arg exists]', 'version': '1.0.0', 'Pronunciation': 'fa', 'How to use': 'fa A', 'Japanese': 'Aは存在する', 'English': 'There be A / A exist', 'Explanation': 'It is used to express the existence of a thing or concept called A.', 'Programming Object': 'Noun(A)', 'Return Object Type': 'Noun', 'Condition': ''},
	'fi':{'ID': '11', 'word': 'fi', 'func': 'Noun.V2N', 'arg': 1, 'exp': '[Make nouns from 1st_arg]', 'version': '1.0.0', 'Pronunciation': 'fi', 'How to use': 'fi A', 'Japanese': '動詞から名詞に変換する', 'English': 'Converting verbs to nouns.', 'Explanation': 'Make nouns from A [verb].', 'Programming Object': 'Noun.V2N(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Verb'},
	'fu':{'ID': '12', 'word': 'fu', 'func': 'Noun.M2N', 'arg': 1, 'exp': '[Make nouns from 1st_arg]', 'version': '1.0.0', 'Pronunciation': 'fu', 'How to use': 'fu A', 'Japanese': '修飾語から名詞に変換する', 'English': 'Converting modifiers to nouns.', 'Explanation': 'Make nouns from A [modifier].', 'Programming Object': 'Noun.M2N(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Modifier'},
	'fo':{'ID': '13', 'word': 'fo', 'func': 'Noun.none', 'arg': 0, 'exp': '[The part of speech makes the noun nonsensical]', 'version': '1.0.0', 'Pronunciation': 'fo', 'How to use': 'fo', 'Japanese': '品詞が名詞の無意味の語を作る', 'English': 'The part of speech makes the noun nonsensical', 'Explanation': 'None[noun]', 'Programming Object': 'Noun.none()', 'Return Object Type': 'Noun', 'Condition': ''},
	'ma':{'ID': '14', 'word': 'ma', 'func': 'Noun.eq', 'arg': 3, 'exp': '[1st_arg and 3rd_arg are equal | 2nd_arg is Verb]', 'version': '1.0.0', 'Pronunciation': 'ma', 'How to use': 'ma A F B', 'Japanese': 'AはBで(F)ある', 'English': 'A F(Verbs such that A means equal to B) B', 'Explanation': 'Used to express that a thing or concept A is equal to B. And F is a verb such that A means equal to B.', 'Programming Object': 'Noun.eqV(A,F,B)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun'},
	'me':{'ID': '15', 'word': 'me', 'func': 'Noun.haveP', 'arg': 3, 'exp': '[1st_arg has the property that 3rd_arg | 2nd_arg is Verb]', 'version': '1.0.0', 'Pronunciation': 'me', 'How to use': 'me A F B', 'Japanese': 'AがBという性質が(F)ある', 'English': 'A F(Verbs such that A means equal to B) B', 'Explanation': 'It is used to express that an object or concept A has the property B. And F is a verb such that A means equal to B.', 'Programming Object': 'Noun.havePV(A,F,B)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Modifier'},
	'mi':{'ID': '16', 'word': 'mi', 'func': 'Noun.have', 'arg': 3, 'exp': '[1st_arg owns or has 3rd_arg | 2nd_arg is Verb]', 'version': '1.0.0', 'Pronunciation': 'mi', 'How to use': 'mi A F B', 'Japanese': 'AはBを所有している/AはBを含んでいる', 'English': 'A have B/A include B', 'Explanation': 'It is used to express that B owns an object or concept A. And F is a verb.', 'Programming Object': 'Noun.have(A,F,B)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun'},
	'mu':{'ID': '17', 'word': 'mu', 'func': 'Noun.belong', 'arg': 3, 'exp': '[1st_arg belongs to has 3rd_arg | 2nd_arg is Verb]', 'version': '1.0.0', 'Pronunciation': 'mu', 'How to use': 'mu A F B', 'Japanese': 'AはBに所属している/AはBに含まれている', 'English': 'A belongs to B/A is included in B', 'Explanation': 'It is used to express that B belongs to an object or concept A. And F is a verb.', 'Programming Object': 'Noun.belong(A,F,B)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun'},
	'mo':{'ID': '18', 'word': 'mo', 'func': 'Noun.gt', 'arg': 4, 'exp': '[1st_arg is more 3rd_arg than 4th_arg | 2nd_arg is Verb]', 'version': '1.0.0', 'Pronunciation': 'mo', 'How to use': 'mo A F B C', 'Japanese': 'AはCより（Bという比較基準で）大きい', 'English': 'A is more B than C', 'Explanation': "Used to express comparative expressions between A and C. It thereby means 'A is more B than C'. And F is a verb.", 'Programming Object': 'Noun.gt(A,F,B,C)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Modifier AND type(C)==Noun'},
	'moa':{'ID': '19', 'word': 'moa', 'func': 'Noun.hearSay', 'arg': 4, 'exp': '[1st_arg{Subject} 2nd_arg{Verb} that 3rd_arg{Content} according to 4th_arg{Source}]', 'version': '4.0.0', 'Pronunciation': 'moa', 'How to use': 'moa A F B C', 'Japanese': 'Bという内容をCという情報源から，AはFする', 'English': 'A(Subject) F(Verb) that B(Content) according to C(Source)', 'Explanation': 'A represents the person to whom the information was communicated, F represents the verb, B represents the content of the information, and C represents the source of the information.', 'Programming Object': 'PhraseAdv.hearSay(A,F,B,C)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun AND type(C)==Noun'},
	'ta':{'ID': '20', 'word': 'ta', 'func': 'Noun.do', 'arg': 2, 'exp': '[1st_arg : Subject | 2nd_arg : Verb]', 'version': '1.0.0', 'Pronunciation': 'ta', 'How to use': 'ta A F', 'Japanese': 'AはF（～する）', 'English': 'A F(do)', 'Explanation': 'It is used to indicate that an actor called A performs an action called F.', 'Programming Object': 'Noun.do(A,F)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb'},
	'te':{'ID': '21', 'word': 'te', 'func': 'Noun.doT', 'arg': 3, 'exp': '[1st_arg : Subject | 2nd_arg : Verb | 3rd_arg : Object]', 'version': '1.0.0', 'Pronunciation': 'te', 'How to use': 'te A F B', 'Japanese': 'AはBをF（～する）', 'English': 'A F(do) B', 'Explanation': 'It is used to express that an actor called A performs an action called F on an object called B.', 'Programming Object': 'Noun.doT(A,F,B)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun'},
	'ti':{'ID': '22', 'word': 'ti', 'func': 'Noun.give', 'arg': 4, 'exp': '[1st_arg : Subject | 2nd_arg : Verb | 3rd_arg : Indirect Object | 4th_arg : Direct Object]', 'version': '1.0.0', 'Pronunciation': 'ti', 'How to use': 'ti A F B C', 'Japanese': 'AはBにCをF（～与える）', 'English': 'A F(give) B C', 'Explanation': 'It is used to describe the action of an actor, A, performing an action, F, on an object, C, towards an object, B.', 'Programming Object': 'Noun.give(A,F,B,C)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun AND type(C)==Noun'},
	'tu':{'ID': '23', 'word': 'tu', 'func': 'Noun.makeN', 'arg': 4, 'exp': '[1st_arg : Subject | 2nd_arg : Verb | 3rd_arg : Object | 4th_arg : Complement(Noun)]', 'version': '1.0.0', 'Pronunciation': 'tu', 'How to use': 'tu A F B C', 'Japanese': 'AはBをCの状態にF（～する）', 'English': 'A F(make) B C[Noun]', 'Explanation': 'It is used to express that an actor called A performs an action called F in order to make an object called B have the property C.', 'Programming Object': 'Noun.makeN(A,F,B,C)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun AND type(C)==Noun'},
	'to':{'ID': '24', 'word': 'to', 'func': 'Noun.makeM', 'arg': 4, 'exp': '[1st_arg : Subject | 2nd_arg : Verb | 3rd_arg : Object | 4th_arg : Complement(Modifier)]', 'version': '1.0.0', 'Pronunciation': 'to', 'How to use': 'to A F B C', 'Japanese': 'AはBをCの状態にF（～する）', 'English': 'A F(make) B C[Modifier]', 'Explanation': 'It is used to express that an actor called A performs an action called F in order to make an object called B have the property C.', 'Programming Object': 'Noun.makeM(A,F,B,C)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Noun AND type(F)==Verb AND type(B)==Noun AND type(C)==Modifier'},
	'da':{'ID': '25', 'word': 'da', 'func': 'Phrase.interrogative', 'arg': 1, 'exp': '[Make the 1st_arg phrase interrogative]', 'version': '1.0.0', 'Pronunciation': 'da', 'How to use': 'da A', 'Japanese': 'A（～ですか）[疑問]', 'English': 'A(interrogative form)', 'Explanation': 'Make the phrase A into a question.', 'Programming Object': 'Phrase.interrogative(A)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Phrase'},
	'de':{'ID': '26', 'word': 'de', 'func': 'Phrase.imperative', 'arg': 1, 'exp': '[Make the 1st_arg phrase imperative]', 'version': '1.0.0', 'Pronunciation': 'de', 'How to use': 'de A', 'Japanese': 'A（～しろ）[命令]', 'English': 'A(imperative form)', 'Explanation': 'Make the phrase A an imperative.', 'Programming Object': 'Phrase.imperative(A)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Phrase'},
	'di':{'ID': '27', 'word': 'di', 'func': 'Phrase.past', 'arg': 1, 'exp': '[Make the 1st_arg phrase past tense]', 'version': '1.0.0', 'Pronunciation': 'di', 'How to use': 'di A', 'Japanese': 'A（～した）[過去]', 'English': 'A(did)', 'Explanation': 'Make the phrase A into a sentence expressing the past.', 'Programming Object': 'Phrase.past(A)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Phrase'},
	'du':{'ID': '28', 'word': 'du', 'func': 'Phrase.future', 'arg': 1, 'exp': '[Make the 1st_arg phrase past tense]', 'version': '1.0.0', 'Pronunciation': 'du', 'How to use': 'du A', 'Japanese': 'A（～するだろう/する予定である）[未来]', 'English': 'A(will do / be going to do)', 'Explanation': 'Make the phrase A into a future or scheduled sentence.', 'Programming Object': 'Phrase.future(A)', 'Return Object Type': 'Phrase', 'Condition': 'type(A)==Phrase'},
	'sa':{'ID': '29', 'word': 'sa', 'func': 'Verb', 'arg': 1, 'exp': '[The act 1st_arg exists]', 'version': '1.0.0', 'Pronunciation': 'sa', 'How to use': 'sa A', 'Japanese': 'A（～する）行為が存在する', 'English': 'There is an act of A', 'Explanation': 'It is used to express the existence of the action A.', 'Programming Object': 'Verb(A)', 'Return Object Type': 'Verb', 'Condition': ''},
	'si':{'ID': '30', 'word': 'si', 'func': 'Verb.M2V', 'arg': 1, 'exp': '[Make verbs from 1st_arg]', 'version': '1.0.0', 'Pronunciation': 'si', 'How to use': 'si A', 'Japanese': '修飾語から動詞に変換する', 'English': 'Converting from modifiers to verbs.', 'Explanation': 'Make verbs from A [modifier].', 'Programming Object': 'Verb.M2V(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Modifier'},
	'su':{'ID': '31', 'word': 'su', 'func': 'Verb.N2V', 'arg': 1, 'exp': '[Make verbs from 1st_arg]', 'version': '1.0.0', 'Pronunciation': 'su', 'How to use': 'su A', 'Japanese': '名詞から動詞に変換する', 'English': 'Converting from nouns to verbs.', 'Explanation': 'Make verbs from A [noun].', 'Programming Object': 'Verb.N2V(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Noun'},
	'so':{'ID': '32', 'word': 'so', 'func': 'Verb.none', 'arg': 0, 'exp': '[The part of speech makes the verb nonsensical]', 'version': '1.0.0', 'Pronunciation': 'so', 'How to use': 'so', 'Japanese': '品詞が動詞の無意味の語を作る', 'English': 'The part of speech makes the verb nonsensical', 'Explanation': 'None[verb]', 'Programming Object': 'Verb.none()', 'Return Object Type': 'Verb', 'Condition': ''},
	'na':{'ID': '33', 'word': 'na', 'func': 'Verb.add', 'arg': 2, 'exp': '[Adding the meaning of 2nd_arg to 1st_arg]', 'version': '1.0.0', 'Pronunciation': 'na', 'How to use': 'na A B', 'Japanese': 'A（～する）にB（～く/～に）[副詞]という意味を付加する', 'English': 'Adding the meaning of B to A [verb]', 'Explanation': 'Used to add the meaning B to the action A.', 'Programming Object': 'Verb.add(A,B)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb AND type(B)==Modifier'},
	'ne':{'ID': '34', 'word': 'ne', 'func': 'Verb.passive', 'arg': 1, 'exp': '[Make the 1st_arg phrase passive]', 'version': '1.0.0', 'Pronunciation': 'ne', 'How to use': 'ne A', 'Japanese': 'A（～される）[受動]', 'English': 'A(be done)', 'Explanation': 'Make the act A passive.', 'Programming Object': 'Verb.passive(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'ni':{'ID': '35', 'word': 'ni', 'func': 'Verb.progressive', 'arg': 1, 'exp': '[Make the 1st_arg phrase progressive]', 'version': '1.0.0', 'Pronunciation': 'ni', 'How to use': 'ni A', 'Japanese': 'A（～している）[継続]', 'English': 'A(be doing)', 'Explanation': 'The act A is made into a form that expresses continuity or persistence.', 'Programming Object': 'Verb.progressive(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'nu':{'ID': '36', 'word': 'nu', 'func': 'Verb.perfective', 'arg': 1, 'exp': '[Make the 1st_arg phrase perfective]', 'version': '1.0.0', 'Pronunciation': 'nu', 'How to use': 'nu A', 'Japanese': 'A（～したことのある）[経験/完了/結果/継続]', 'English': 'A(have done)', 'Explanation': 'Make a form that expresses the result or experience of completing the act of A.', 'Programming Object': 'Verb.perfective(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'la':{'ID': '37', 'word': 'la', 'func': 'Modifier', 'arg': 1, 'exp': '[The modifier 1st_arg exists]', 'version': '1.0.0', 'Pronunciation': 'la', 'How to use': 'la A', 'Japanese': 'A（～な/～の/～に/～く）[形容詞/副詞]という修飾語が存在する', 'English': 'There is a modifier [adjective/adverb] called A', 'Explanation': 'It is used to express the existence of the modifier A.', 'Programming Object': 'Modifier(A)', 'Return Object Type': 'Modifier', 'Condition': 'type(A)==Verb'},
	'li':{'ID': '38', 'word': 'li', 'func': 'Modifier.N2M', 'arg': 1, 'exp': '[Make modifiers from 1st_arg]', 'version': '1.0.0', 'Pronunciation': 'li', 'How to use': 'li A', 'Japanese': 'A（～の/～に/～で）', 'English': '(of/in/at/on/by/with etc.) A', 'Explanation': 'Make modifiers from A [noun].', 'Programming Object': 'Modifier.N2M(A)', 'Return Object Type': 'Modifier', 'Condition': 'type(A)==Noun'},
	'lu':{'ID': '39', 'word': 'lu', 'func': 'Modifier.V2M', 'arg': 1, 'exp': '[Make modifiers from 1st_arg]', 'version': '1.0.0', 'Pronunciation': 'lu', 'How to use': 'lu A', 'Japanese': '動詞から修飾語に変換する', 'English': 'Converting verbs to modifiers.', 'Explanation': 'Make modifiers from A [verb].', 'Programming Object': 'Modifier.V2M(A)', 'Return Object Type': 'Modifier', 'Condition': 'type(A)==Verb'},
	'lo':{'ID': '40', 'word': 'lo', 'func': 'Modifier.none', 'arg': 0, 'exp': '[The part of speech makes the modifier nonsensical]', 'version': '1.0.0', 'Pronunciation': 'lo', 'How to use': 'lo', 'Japanese': '品詞が修飾語の無意味の語を作る', 'English': 'The part of speech makes the modifier nonsensical', 'Explanation': 'None[modifier]', 'Programming Object': 'Modifier.none()', 'Return Object Type': 'Modifier', 'Condition': ''},
	'ka':{'ID': '41', 'word': 'ka', 'func': 'Modifier.add', 'arg': 2, 'exp': '[Adding the meaning of 2nd_arg to 1st_arg]', 'version': '1.0.0', 'Pronunciation': 'ka', 'How to use': 'ka A B', 'Japanese': 'AにB[副詞]という意味を付加する', 'English': 'Adding the meaning of B to A [modifier]', 'Explanation': 'Used to add the meaning B to the modifier A.', 'Programming Object': 'Modifier.add(A,B)', 'Return Object Type': 'Modifier', 'Condition': 'type(A)==Modifier AND type(B)==Modifier'},
	'ke':{'ID': '42', 'word': 'ke', 'func': 'Modifier.Neg', 'arg': 1, 'exp': '[not 1st_arg]', 'version': '1.0.0', 'Pronunciation': 'ke', 'How to use': 'ke A', 'Japanese': 'Aでなく', 'English': 'not A', 'Explanation': 'The degree of the adjective is negatively normal for a given adjective. In the original sense, "small". For example, this function can express \'bad\' for \'good\'.', 'Programming Object': 'Modifier.Neg(A)', 'Return Object Type': 'Modifier', 'Condition': 'type(A)==Modifier'},
	'pan':{'ID': '43', 'word': 'pan', 'func': 'DeterminerN.biology', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some kind of person or creature']", 'version': '1.0.0', 'Pronunciation': 'pan', 'How to use': 'pan A', 'Japanese': '名詞を「Aが何らかの人や生物」と限定する', 'English': "Limit nouns to 'A is some kind of person or creature'", 'Explanation': 'Person or creature', 'Programming Object': 'DeterminerN.biology(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'pen':{'ID': '44', 'word': 'pen', 'func': 'DeterminerN.thing', 'arg': 1, 'exp': "[Limit nouns to '1st_argi s some object or concept']", 'version': '1.0.0', 'Pronunciation': 'pen', 'How to use': 'pen A', 'Japanese': '名詞を「Aが何らかの物や概念」と限定する', 'English': "Limit nouns to 'A is some object or concept'", 'Explanation': 'Object or concept', 'Programming Object': 'DeterminerN.thing(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'pin':{'ID': '45', 'word': 'pin', 'func': 'DeterminerN.time', 'arg': 1, 'exp': "[Limit a noun to '1st_arg is some time']", 'version': '1.0.0', 'Pronunciation': 'pin', 'How to use': 'pin A', 'Japanese': '名詞を「Aが何らかの時間」と限定する', 'English': "Limit a noun to 'A is some time'", 'Explanation': 'Time', 'Programming Object': 'DeterminerN.time(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'pun':{'ID': '46', 'word': 'pun', 'func': 'DeterminerN.place', 'arg': 1, 'exp': "[Limit a noun to '1st_arg is some place']", 'version': '1.0.0', 'Pronunciation': 'pun', 'How to use': 'pun A', 'Japanese': '名詞を「Aが何らかの場所」と限定する', 'English': "Limit a noun to 'A is some place'", 'Explanation': 'Place', 'Programming Object': 'DeterminerN.place(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'pon':{'ID': '47', 'word': 'pon', 'func': 'DeterminerN.reason', 'arg': 1, 'exp': "[Limit a noun to '1st_arg is some reason']", 'version': '1.0.0', 'Pronunciation': 'pon', 'How to use': 'pon A', 'Japanese': '名詞を「Aが何らかの理由」と限定する', 'English': "Limit a noun to 'A is some reason'", 'Explanation': 'Reason', 'Programming Object': 'DeterminerN.reason(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'ban':{'ID': '48', 'word': 'ban', 'func': 'DeterminerN.method', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some way or tool or means']", 'version': '1.0.0', 'Pronunciation': 'ban', 'How to use': 'ban A', 'Japanese': '名詞を「Aが何らかの方法や道具や手段」と限定する', 'English': "Limit nouns to 'A is some way or tool or means'", 'Explanation': 'Ways, tools or means', 'Programming Object': 'DeterminerN.method(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'ben':{'ID': '49', 'word': 'ben', 'func': 'DeterminerN.human', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some kind of human being']", 'version': '1.0.0', 'Pronunciation': 'ben', 'How to use': 'ben A', 'Japanese': '名詞を「Aが何らかの人間」と限定する', 'English': "Limit nouns to 'A is some kind of human being'", 'Explanation': 'Human', 'Programming Object': 'DeterminerN.human(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'bin':{'ID': '50', 'word': 'bin', 'func': 'DeterminerN.animal', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some kind of animal']", 'version': '1.0.0', 'Pronunciation': 'bin', 'How to use': 'bin A', 'Japanese': '名詞を「Aが何らかの動物」と限定する', 'English': "Limit nouns to 'A is some kind of animal'", 'Explanation': 'Animal', 'Programming Object': 'DeterminerN.animal(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'bun':{'ID': '51', 'word': 'bun', 'func': 'DeterminerN.plant', 'arg': 1, 'exp': "[Limit the noun to '1st_arg is some kind of plant']", 'version': '1.0.0', 'Pronunciation': 'bun', 'How to use': 'bun A', 'Japanese': '名詞を「Aが何らかの植物」と限定する', 'English': "Limit the noun to 'A is some kind of plant'", 'Explanation': 'Plant', 'Programming Object': 'DeterminerN.plant(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'bon':{'ID': '52', 'word': 'bon', 'func': 'DeterminerN.material', 'arg': 1, 'exp': "[Limit the noun to '1st_arg is some kind of material']", 'version': '1.0.0', 'Pronunciation': 'bon', 'How to use': 'bon A', 'Japanese': '名詞を「Aが何らかの材料」と限定する', 'English': "Limit the noun to 'A is some kind of material'", 'Explanation': 'Material', 'Programming Object': 'DeterminerN.material(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'fan':{'ID': '53', 'word': 'fan', 'func': 'DeterminerN.start', 'arg': 1, 'exp': "[Limit a noun to '1st_arg is some starting point']", 'version': '1.0.0', 'Pronunciation': 'fan', 'How to use': 'fan A', 'Japanese': '名詞を「Aが何らかの始点」と限定する', 'English': "Limit a noun to 'A is some starting point'", 'Explanation': "Similar meaning to 'from' in English  when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.start(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'fen':{'ID': '54', 'word': 'fen', 'func': 'DeterminerN.end', 'arg': 1, 'exp': "[Limit a noun to '1st_arg is some end point']", 'version': '1.0.0', 'Pronunciation': 'fen', 'How to use': 'fen A', 'Japanese': '名詞を「Aが何らかの終点」と限定する', 'English': "Limit a noun to 'A is some end point'", 'Explanation': "Similar meaning to 'to' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.end(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'fin':{'ID': '55', 'word': 'fin', 'func': 'DeterminerN.section', 'arg': 1, 'exp': "[Limit a noun to '1st_arg is some interval']", 'version': '1.0.0', 'Pronunciation': 'fin', 'How to use': 'fin A', 'Japanese': '名詞を「Aが何らかの区間」と限定する', 'English': "Limit a noun to 'A is some interval'", 'Explanation': "Similar meaning to 'between' or 'among' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.section(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'fun':{'ID': '56', 'word': 'fun', 'func': 'DeterminerN.In', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is in some']", 'version': '1.0.0', 'Pronunciation': 'fun', 'How to use': 'fun A', 'Japanese': '名詞を「Aが何らかの中」と限定する', 'English': "Limit nouns to 'A is in some'", 'Explanation': "Similar meaning to 'in' or 'into' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.In(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'fon':{'ID': '57', 'word': 'fon', 'func': 'DeterminerN.Out', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is out some']", 'version': '1.0.0', 'Pronunciation': 'fon', 'How to use': 'fon A', 'Japanese': '名詞を「Aが何らかの外」と限定する', 'English': "Limit nouns to 'A is out some'", 'Explanation': "Similar meaning to 'out' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.Out(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'man':{'ID': '58', 'word': 'man', 'func': 'DeterminerN.above', 'arg': 1, 'exp': "[Limit nouns to '1st_arg above some']", 'version': '1.0.0', 'Pronunciation': 'man', 'How to use': 'man A', 'Japanese': '名詞を「Aが何らかの上」と限定する', 'English': "Limit nouns to 'A above some'", 'Explanation': "Similar meaning to 'over', 'above' or 'on' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.above(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'men':{'ID': '59', 'word': 'men', 'func': 'DeterminerN.below', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is below some']", 'version': '1.0.0', 'Pronunciation': 'men', 'How to use': 'men A', 'Japanese': '名詞を「Aが何らかの下」と限定する', 'English': "Limit nouns to 'A is below some'", 'Explanation': "Similar meaning to 'under', 'below' or 'on' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.below(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'min':{'ID': '60', 'word': 'min', 'func': 'DeterminerN.on', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is grounded to something']", 'version': '1.0.0', 'Pronunciation': 'min', 'How to use': 'min A', 'Japanese': '名詞を「Aが何らかに接地している」と限定する', 'English': "Limit nouns to 'A is grounded to something'", 'Explanation': "Similar meaning to 'on' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.on(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'mun':{'ID': '61', 'word': 'mun', 'func': 'DeterminerN.right', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some right']", 'version': '1.0.0', 'Pronunciation': 'mun', 'How to use': 'mun A', 'Japanese': '名詞を「Aが何らかの右」と限定する', 'English': "Limit nouns to 'A is some right'", 'Explanation': "Similar meaning to 'right of' or 'on' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.right(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'mon':{'ID': '62', 'word': 'mon', 'func': 'DeterminerN.left', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some left']", 'version': '1.0.0', 'Pronunciation': 'mon', 'How to use': 'mon A', 'Japanese': '名詞を「Aが何らかの左」と限定する', 'English': "Limit nouns to 'A is some left'", 'Explanation': "Similar meaning to 'left of' or 'on' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.left(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'tan':{'ID': '63', 'word': 'tan', 'func': 'DeterminerN.affect', 'arg': 1, 'exp': "[Limit nouns to 'something that 1st_arg affects in some way']", 'version': '1.0.0', 'Pronunciation': 'tan', 'How to use': 'tan A', 'Japanese': '名詞を「Aが何らかの影響を与えるものや関連していること」と限定する', 'English': "Limit the noun to 'something that A affects or is related to in some way'", 'Explanation': "Similar meaning to 'by', 'about' or 'for' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.affect(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'ten':{'ID': '64', 'word': 'ten', 'func': 'DeterminerN.affected', 'arg': 1, 'exp': "[Limit noun to 'something that 1st_arg is affected by in some way']", 'version': '1.0.0', 'Pronunciation': 'ten', 'How to use': 'ten A', 'Japanese': '名詞を「Aが何らかの影響が与えられるもの」と限定する', 'English': "Limit noun to 'something that A is affected by in some way'", 'Explanation': "Similar meaning to 'with' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.affected(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'tin':{'ID': '65', 'word': 'tin', 'func': 'DeterminerN.near', 'arg': 1, 'exp': "[Limit the noun to 'something that 1st_arg is near or related to']", 'version': '1.0.0', 'Pronunciation': 'tin', 'How to use': 'tin A', 'Japanese': '名詞を「Aが近くにあるものや関連しているもの」と限定する', 'English': "Limit the noun to 'something that A is near or related to'.", 'Explanation': "Similar meaning to 'near', 'about', 'with' or 'by' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.near(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'tun':{'ID': '66', 'word': 'tun', 'func': 'DeterminerN.move', 'arg': 1, 'exp': "Limit nouns to those with motion, such as '1st_arg crosses', '1st_arg passes' or '1st_arg heads'.", 'version': '1.0.0', 'Pronunciation': 'tun', 'How to use': 'tun A', 'Japanese': '名詞を「Aが横切る」や「Aが通る」「Aが向かう」と動きのあるものに限定する', 'English': "Limit nouns to those with motion, such as 'A crosses', 'A passes' or 'A heads'.", 'Explanation': "Similar meaning to 'to', 'through', 'around', 'into', 'across', 'along', 'over', 'under', 'up', 'down' or 'past' etc. in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.move(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'ton':{'ID': '67', 'word': 'ton', 'func': 'DeterminerN.stop', 'arg': 1, 'exp': '[Limit nouns to those with static]', 'version': '1.0.0', 'Pronunciation': 'ton', 'How to use': 'ton A', 'Japanese': '名詞を静止のあるものに限定する', 'English': 'Limit nouns to those with static', 'Explanation': "Similar meaning to 'in', 'at'  or 'on' etc. in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.stop(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'dan':{'ID': '68', 'word': 'dan', 'func': 'DeterminerN.all', 'arg': 1, 'exp': "[Limit the noun to 'all 1st_arg'.]", 'version': '1.0.0', 'Pronunciation': 'dan', 'How to use': 'dan A', 'Japanese': '名詞を「すべてのA」と限定する', 'English': "Limit the noun to 'all A'", 'Explanation': 'All', 'Programming Object': 'DeterminerN.all(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'den':{'ID': '69', 'word': 'den', 'func': 'DeterminerN.many', 'arg': 1, 'exp': "[Limit the noun to 'many 1st_arg']", 'version': '1.0.0', 'Pronunciation': 'den', 'How to use': 'den A', 'Japanese': '名詞を「多くのA」と限定する', 'English': "Limit the noun to 'many A', 'much A' or 'a lot of A'", 'Explanation': 'Many', 'Programming Object': 'DeterminerN.many(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'din':{'ID': '70', 'word': 'din', 'func': 'DeterminerN.some', 'arg': 1, 'exp': "[Limit the noun to 'some 1st_arg']", 'version': '1.0.0', 'Pronunciation': 'din', 'How to use': 'din A', 'Japanese': '名詞を「いくつかのA」と限定する', 'English': "Limit the noun to 'some A', 'a few A' or 'several A'", 'Explanation': 'Some', 'Programming Object': 'DeterminerN.some(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'dun':{'ID': '71', 'word': 'dun', 'func': 'DeterminerN.one', 'arg': 1, 'exp': "[Limit the noun to 'any 1st_arg']", 'version': '1.0.0', 'Pronunciation': 'dun', 'How to use': 'dun A', 'Japanese': '名詞を「ある（一つの）A」と限定する', 'English': "Limit the noun to 'a certain A', 'one certain A'.", 'Explanation': 'One', 'Programming Object': 'DeterminerN.one(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'don':{'ID': '72', 'word': 'don', 'func': 'DeterminerN.plural', 'arg': 1, 'exp': '[Making nouns plural]', 'version': '1.0.0', 'Pronunciation': 'don', 'How to use': 'don A', 'Japanese': '名詞を複数形にする', 'English': 'Making nouns plural', 'Explanation': 'Plural', 'Programming Object': 'DeterminerN.plural(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'san':{'ID': '73', 'word': 'san', 'func': 'DeterminerN.stressed', 'arg': 1, 'exp': '[1st_arg as stressed form]', 'version': '1.0.0', 'Pronunciation': 'san', 'How to use': 'san A', 'Japanese': '名詞を強調形する', 'English': 'Stressed form of nouns.', 'Explanation': 'It is added to the noun that is most emphasised in a given sentence. However, it is usually not added to the subject. It is particularly useful when a noun is explained by a relative pronoun and a subordinate clause, where the noun being explained is a noun other than the genitive of the subordinate clause.', 'Programming Object': 'DeterminerN.stressed(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'sen':{'ID': '74', 'word': 'sen', 'func': 'DeterminerN.possessive', 'arg': 1, 'exp': '[Make 1st_arg a possessive pronoun]', 'version': '1.0.0', 'Pronunciation': 'sen', 'How to use': 'sen A', 'Japanese': '所有代名詞を作成する', 'English': 'Creating possessive pronouns', 'Explanation': 'Make A a possessive pronoun', 'Programming Object': 'DeterminerN.possessive(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'sin':{'ID': '75', 'word': 'sin', 'func': 'DeterminerN.reflexive', 'arg': 1, 'exp': '[Make 1st_arg a reflexive pronoun]', 'version': '1.0.0', 'Pronunciation': 'sin', 'How to use': 'sin A', 'Japanese': '再帰代名詞を作成する', 'English': 'Creating recursive pronouns', 'Explanation': 'Make A a reflexive pronoun', 'Programming Object': 'DeterminerN.reflexive(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'sun':{'ID': '76', 'word': 'sun', 'func': 'DeterminerN.etc', 'arg': 1, 'exp': "[Limit nouns to '1st_arg etc.']", 'version': '1.0.0', 'Pronunciation': 'sun', 'How to use': 'sun A', 'Japanese': '名詞を「Aなど」と限定する', 'English': "Limit nouns to 'A etc.'", 'Explanation': 'Used where there are other.', 'Programming Object': 'DeterminerN.etc(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'son':{'ID': '77', 'word': 'son', 'func': 'DeterminerN.abstract', 'arg': 1, 'exp': '[Abstracting nouns in 1st_arg]', 'version': '1.0.0', 'Pronunciation': 'son', 'How to use': 'son A', 'Japanese': '～的/～のようなもの/名詞を抽象化する', 'English': 'something like A/Abstracting nouns', 'Explanation': 'DeterminerN.abstract(Noun.M2N(Modifier(A))) to represent an abstract concept for A. Modifier.N2M(DeterminerN.abstract(A)) to make A a modifier of the figurative expression.', 'Programming Object': 'DeterminerN.abstract(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'nan':{'ID': '78', 'word': 'nan', 'func': 'DeterminerN.front', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is in front of some space']", 'version': '1.0.0', 'Pronunciation': 'nan', 'How to use': 'nan A', 'Japanese': '名詞を「Aが何らかの空間的に前」と限定する', 'English': "Limit nouns to 'A is in front of some space'", 'Explanation': "Similar meaning to 'in front of' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.front(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'nen':{'ID': '79', 'word': 'nen', 'func': 'DeterminerN.behind', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is behind in some space']", 'version': '1.0.0', 'Pronunciation': 'nen', 'How to use': 'nen A', 'Japanese': '名詞を「Aが何らかの空間的に後ろ」と限定する', 'English': "Limit nouns to 'A is behind in some space'", 'Explanation': "Similar meaning to 'behind' in English when combined with Modifier.N2M().", 'Programming Object': 'DeterminerN.behind(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'nun':{'ID': '80', 'word': 'nun', 'func': 'DeterminerN.future', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some time in the future']", 'version': '1.0.0', 'Pronunciation': 'nun', 'How to use': 'nun A', 'Japanese': '名詞を「Aが何らかの時間的に未来」と限定する', 'English': "Limit nouns to 'A is some time in the future'", 'Explanation': "Similar meaning to 'after' in English regarding time.", 'Programming Object': 'DeterminerN.future(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'non':{'ID': '81', 'word': 'non', 'func': 'DeterminerN.past', 'arg': 1, 'exp': "[Limit nouns to '1st_arg is some time in the past']", 'version': '1.0.0', 'Pronunciation': 'non', 'How to use': 'non A', 'Japanese': '名詞を「Aが何らかの時間的に過去」と限定する', 'English': "Limit nouns to 'A is some time in the past'", 'Explanation': "Similar meaning to 'before' and 'ago' in English regarding time.", 'Programming Object': 'DeterminerN.past(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'lan':{'ID': '82', 'word': 'lan', 'func': 'DeterminerN.male', 'arg': 1, 'exp': "[Limit noun to '1st_arg is some male']", 'version': '1.0.0', 'Pronunciation': 'lan', 'How to use': 'lan A', 'Japanese': '名詞を「Aが何らかの男性や雄」と限定する', 'English': "Limit noun to 'A is some male'", 'Explanation': 'Male', 'Programming Object': 'DeterminerN.male(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'len':{'ID': '83', 'word': 'len', 'func': 'DeterminerN.female', 'arg': 1, 'exp': "[Limit the noun to '1st_arg is some female']", 'version': '1.0.0', 'Pronunciation': 'len', 'How to use': 'len A', 'Japanese': '名詞を「Aが何らかの女性や雌」と限定する', 'English': "Limit the noun to 'A is some female'", 'Explanation': 'Female', 'Programming Object': 'DeterminerN.female(A)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun'},
	'pak':{'ID': '84', 'word': 'pak', 'func': 'DeterminerV.Estimation100', 'arg': 1, 'exp': '[100% probability1st_arg]', 'version': '4.0.0', 'Pronunciation': 'pak', 'How to use': 'pak A', 'Japanese': '100%の確率でAする', 'English': '100% probability A', 'Explanation': 'Used when something is not confirmed but is to be estimated. Used especially when the guess is almost 100%. (Type) Probability', 'Programming Object': 'DeterminerV.Estimation100(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'pek':{'ID': '85', 'word': 'pek', 'func': 'DeterminerV.Estimation75', 'arg': 1, 'exp': '[75% probability 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'pek', 'How to use': 'pek A', 'Japanese': '75%の確率でAする', 'English': '75% probability A', 'Explanation': 'Used when something is not confirmed but is to be estimated. Used especially when the guess is almost 75%. (Type) Probability', 'Programming Object': 'DeterminerV.Estimation75(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'pik':{'ID': '86', 'word': 'pik', 'func': 'DeterminerV.Estimation50', 'arg': 1, 'exp': '[50% probability 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'pik', 'How to use': 'pik A', 'Japanese': '50%の確率でAする', 'English': '50% probability A', 'Explanation': 'Used when something is not confirmed but is to be estimated. Used especially when the guess is almost 50%. (Type) Probability', 'Programming Object': 'DeterminerV.Estimation50(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'puk':{'ID': '87', 'word': 'puk', 'func': 'DeterminerV.Estimation25', 'arg': 1, 'exp': '[25% probability 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'puk', 'How to use': 'puk A', 'Japanese': '25%の確率でAする', 'English': '25% probability A', 'Explanation': 'Used when something is not confirmed but is to be estimated. Used especially when the guess is almost 25%. (Type) Probability', 'Programming Object': 'DeterminerV.Estimation25(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'pok':{'ID': '88', 'word': 'pok', 'func': 'DeterminerV.Estimation0', 'arg': 1, 'exp': '[0% probability 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'pok', 'How to use': 'pok A', 'Japanese': '0%の確率でAする', 'English': '0% probability A', 'Explanation': 'Used when something is not confirmed but is to be estimated. Used especially when the guess is almost 0%. (Type) Probability', 'Programming Object': 'DeterminerV.Estimation0(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'fak':{'ID': '89', 'word': 'fak', 'func': 'DeterminerV.Frequency100', 'arg': 1, 'exp': '[100% frequently 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'fak', 'How to use': 'fak A', 'Japanese': '100%ぐらいの頻度でAする', 'English': '100% frequently A', 'Explanation': 'Used when something is done 100% frequently. (Type) Frequency', 'Programming Object': 'DeterminerV.Frequency100(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'fek':{'ID': '90', 'word': 'fek', 'func': 'DeterminerV.Frequency75', 'arg': 1, 'exp': '[75% frequently1st_arg]', 'version': '4.0.0', 'Pronunciation': 'fek', 'How to use': 'fek A', 'Japanese': '75%ぐらいの頻度でAする', 'English': '75% frequently A', 'Explanation': 'Used when something is done 75% frequently. (Type) Frequency', 'Programming Object': 'DeterminerV.Frequency75(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'fik':{'ID': '91', 'word': 'fik', 'func': 'DeterminerV.Frequency50', 'arg': 1, 'exp': '[50% frequently 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'fik', 'How to use': 'fik A', 'Japanese': '50%ぐらいの頻度でAする', 'English': '50% frequently A', 'Explanation': 'Used when something is done 50% frequently. (Type) Frequency', 'Programming Object': 'DeterminerV.Frequency50(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'fuk':{'ID': '92', 'word': 'fuk', 'func': 'DeterminerV.Frequency25', 'arg': 1, 'exp': '[25% frequently 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'fuk', 'How to use': 'fuk A', 'Japanese': '25%ぐらいの頻度でAする', 'English': '25% frequently A', 'Explanation': 'Used when something is done 25% frequently. (Type) Frequency', 'Programming Object': 'DeterminerV.Frequency25(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'fok':{'ID': '93', 'word': 'fok', 'func': 'DeterminerV.Frequency0', 'arg': 1, 'exp': '[0% frequently 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'fok', 'How to use': 'fok A', 'Japanese': '0%ぐらいの頻度でAする', 'English': '0% frequently A', 'Explanation': 'Used when something is done 0% frequently. (Type) Frequency', 'Programming Object': 'DeterminerV.Frequency0(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'tak':{'ID': '94', 'word': 'tak', 'func': 'DeterminerV.Start', 'arg': 1, 'exp': '[Someone starts doing something]', 'version': '4.0.0', 'Pronunciation': 'tak', 'How to use': 'tak A', 'Japanese': 'Aし始める', 'English': 'Someone starts doing something', 'Explanation': 'Used to indicate the moment when something has begun to be done. (Type) Extended phase', 'Programming Object': 'DeterminerV.Start(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'tek':{'ID': '95', 'word': 'tek', 'func': 'DeterminerV.Condition', 'arg': 1, 'exp': '[Someone is in the middle of doing something]', 'version': '4.0.0', 'Pronunciation': 'tek', 'How to use': 'tek A', 'Japanese': 'Aしている途中である', 'English': 'Someone is in the middle of doing something', 'Explanation': 'Used to indicate that something is in the process of being done and is in transition. It is also used to describe verbs as action verbs. (Type) Extended phase', 'Programming Object': 'DeterminerV.Condition(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'tik':{'ID': '96', 'word': 'tik', 'func': 'DeterminerV.Complete', 'arg': 1, 'exp': '[Someone was in the middle of doing something but has completed]', 'version': '4.0.0', 'Pronunciation': 'tik', 'How to use': 'tik A', 'Japanese': 'Aしている途中だったが完了した', 'English': 'Someone was in the middle of doing something but has completed', 'Explanation': 'Used to indicate that something has been done and the transition has been completed. (Type) Extended phase', 'Programming Object': 'DeterminerV.Complete(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'tuk':{'ID': '97', 'word': 'tuk', 'func': 'DeterminerV.Continue', 'arg': 1, 'exp': '[Someone is still doing something]', 'version': '4.0.0', 'Pronunciation': 'tuk', 'How to use': 'tuk A', 'Japanese': 'Aしている状態が続いている', 'English': 'Someone is still doing something', 'Explanation': 'Used to indicate that something has been done that has ended a transition, and that the transition is continuing. It is also used to express a verb as a state verb. (Type) Extended phase', 'Programming Object': 'DeterminerV.Continue(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'tok':{'ID': '98', 'word': 'tok', 'func': 'DeterminerV.End', 'arg': 1, 'exp': '[Someone finishes doing something]', 'version': '4.0.0', 'Pronunciation': 'tok', 'How to use': 'tok A', 'Japanese': 'Aし終える', 'English': 'Someone finishes doing something', 'Explanation': 'It is used to describe the moment when something is completely finished. (Type) Extended phase', 'Programming Object': 'DeterminerV.End(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'bak':{'ID': '99', 'word': 'bak', 'func': 'DeterminerV.past', 'arg': 1, 'exp': '[In the past it was 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'bak', 'How to use': 'bak A', 'Japanese': '過去にはAであった', 'English': 'In the past it was A', 'Explanation': 'Used when A represents the past. (Type) Extended tense', 'Programming Object': 'DeterminerV.past(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'bik':{'ID': '100', 'word': 'bik', 'func': 'DeterminerV.present', 'arg': 1, 'exp': '[In the present it is 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'bik', 'How to use': 'bik A', 'Japanese': '現在Aである', 'English': 'In the present it is A', 'Explanation': 'Used when A represents the present. (Type) Extended tense', 'Programming Object': 'DeterminerV.present(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'bok':{'ID': '101', 'word': 'bok', 'func': 'DeterminerV.future', 'arg': 1, 'exp': '[In the future it will be 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'bok', 'How to use': 'bok A', 'Japanese': '未来にはAだろう', 'English': 'In the future it will be A', 'Explanation': 'Used when A represents the future. (Type) Extended tense', 'Programming Object': 'DeterminerV.future(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'nak':{'ID': '102', 'word': 'nak', 'func': 'DeterminerV.Possible', 'arg': 1, 'exp': '[can]', 'version': '4.0.0', 'Pronunciation': 'nak', 'How to use': 'nak A', 'Japanese': 'Aできる/Aすることが可能である', 'English': 'can', 'Explanation': 'Used to mean that it is possible to do something. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.Possible(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'nek':{'ID': '103', 'word': 'nek', 'func': 'DeterminerV.Ability', 'arg': 1, 'exp': '[can]', 'version': '4.0.0', 'Pronunciation': 'nek', 'How to use': 'nek A', 'Japanese': 'Aする能力がある', 'English': 'can', 'Explanation': 'Used when one has the ability to do something. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.Ability(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'nik':{'ID': '104', 'word': 'nik', 'func': 'DeterminerV.Will', 'arg': 1, 'exp': '[will/shall]', 'version': '4.0.0', 'Pronunciation': 'nik', 'How to use': 'nik A', 'Japanese': 'Aしよう', 'English': 'will/shall', 'Explanation': 'Used when you have a strong feeling to do something. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.Will(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'nuk':{'ID': '105', 'word': 'nuk', 'func': 'DeterminerV.Obligation', 'arg': 1, 'exp': '[should/ought to]', 'version': '4.0.0', 'Pronunciation': 'nuk', 'How to use': 'nuk A', 'Japanese': 'Aすべきだ', 'English': 'should/ought to', 'Explanation': 'Used when there is an obligation to do something. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.Obligation(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'nok':{'ID': '106', 'word': 'nok', 'func': 'DeterminerV.Necessary', 'arg': 1, 'exp': '[need to]', 'version': '4.0.0', 'Pronunciation': 'nok', 'How to use': 'nok A', 'Japanese': 'Aする必要がある', 'English': 'need to', 'Explanation': 'To do something when one has to do something because of an internal condition. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.Necessary(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'lak':{'ID': '107', 'word': 'lak', 'func': 'DeterminerV.Duty', 'arg': 1, 'exp': '[must/have to]', 'version': '4.0.0', 'Pronunciation': 'lak', 'How to use': 'lak A', 'Japanese': 'Aしなければならない', 'English': 'must/have to', 'Explanation': 'Used when one has to do something because of an external condition. It is used only when it is done voluntarily. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.Duty(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'lek':{'ID': '108', 'word': 'lek', 'func': 'DeterminerV.forced', 'arg': 1, 'exp': '[be forced to A by a strong external force]', 'version': '4.0.0', 'Pronunciation': 'lek', 'How to use': 'lek A', 'Japanese': '外部からの強い力で強制的にAさせられる', 'English': 'be forced to A by a strong external force', 'Explanation': "It is used to indicate that someone is forced to perform some action by someone's authority. (Type) Verb meaning addition", 'Programming Object': 'DeterminerV.forced(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'lik':{'ID': '109', 'word': 'lik', 'func': 'DeterminerV.want', 'arg': 1, 'exp': '[want to 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'lik', 'How to use': 'lik A', 'Japanese': 'Aしたい/Aすることを願望する', 'English': 'want to A', 'Explanation': 'Used when there is a desire to do something. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.want(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'luk':{'ID': '110', 'word': 'luk', 'func': 'DeterminerV.dare', 'arg': 1, 'exp': '[dare 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'luk', 'How to use': 'luk A', 'Japanese': 'あえてAする/思い切ってAする/Aする勇気がある', 'English': 'dare A', 'Explanation': 'Used to express what one does knowing that there will be difficulties. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.dare(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'lok':{'ID': '111', 'word': 'lok', 'func': 'DeterminerV.allow', 'arg': 1, 'exp': '[allow to 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'lok', 'How to use': 'lok A', 'Japanese': 'Aすることを許す', 'English': 'allow to A', 'Explanation': 'Used to give permission to do something. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.allow(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'kak':{'ID': '112', 'word': 'kak', 'func': 'DeterminerV.easy', 'arg': 1, 'exp': '[be easy to A]', 'version': '4.0.0', 'Pronunciation': 'kak', 'How to use': 'kak A', 'Japanese': 'Aしやすい', 'English': 'be easy to A', 'Explanation': 'It is used to describe an action as being easy to perform. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.easy(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'kek':{'ID': '113', 'word': 'kek', 'func': 'DeterminerV.hard', 'arg': 1, 'exp': '[be hard to A]', 'version': '4.0.0', 'Pronunciation': 'kek', 'How to use': 'kek A', 'Japanese': 'Aしにくい', 'English': 'be hard to A', 'Explanation': 'It is used to describe an action as being hard to perform. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.hard(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'kik':{'ID': '114', 'word': 'kik', 'func': 'DeterminerV.habit', 'arg': 1, 'exp': '[Habitually A]', 'version': '4.0.0', 'Pronunciation': 'kik', 'How to use': 'kik A', 'Japanese': '習慣的にAする', 'English': 'Habitually A', 'Explanation': 'It is used to describe the regular or habitual performance of an action. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.habit(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'kuk':{'ID': '115', 'word': 'kuk', 'func': 'DeterminerV.Polite', 'arg': 1, 'exp': '[Make the verb a polite expression]', 'version': '4.0.0', 'Pronunciation': 'kuk', 'How to use': 'kuk A', 'Japanese': 'Aします（丁寧表現）', 'English': 'Make the verb a polite expression', 'Explanation': 'Used to create a simple polite expression. It can be used regardless of rank. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.Polite(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'kok':{'ID': '116', 'word': 'kok', 'func': 'DeterminerV.Respect', 'arg': 1, 'exp': '[Make the verb a respectful expression]', 'version': '4.0.0', 'Pronunciation': 'kok', 'How to use': 'kok A', 'Japanese': 'Aされる（尊敬表現）', 'English': 'Make the verb a respectful expression', 'Explanation': 'Used to express respect for something. Mainly used when one is of low status. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.Respect(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'gak':{'ID': '117', 'word': 'gak', 'func': 'DeterminerV.volitional', 'arg': 1, 'exp': '[Consciously 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'gak', 'How to use': 'gak A', 'Japanese': '意識的にAする', 'English': 'Consciously A', 'Explanation': 'Create a volitional verb. It is used when the action is performed consciously. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.volitional(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'gek':{'ID': '118', 'word': 'gek', 'func': 'DeterminerV.nonVolitional', 'arg': 1, 'exp': '[Unconsciously 1st_arg]', 'version': '4.0.0', 'Pronunciation': 'gek', 'How to use': 'gek A', 'Japanese': '無意識的にAする', 'English': 'Unconsciously A', 'Explanation': 'Create a non-volitional verb. It is used when the action is performed unconsciously. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.nonVolitional(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'gik':{'ID': '119', 'word': 'gik', 'func': 'DeterminerV.Requests', 'arg': 1, 'exp': '[will/would/can/could]', 'version': '4.0.0', 'Pronunciation': 'gik', 'How to use': 'gik A', 'Japanese': 'Aしてください', 'English': 'will/would/can/could', 'Explanation': 'Used to ask someone to do something. Always use interrogative sentences. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.Requests(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'guk':{'ID': '120', 'word': 'guk', 'func': 'DeterminerV.Permission', 'arg': 1, 'exp': '[can/may]', 'version': '4.0.0', 'Pronunciation': 'guk', 'How to use': 'guk A', 'Japanese': 'Aしてもよいですか', 'English': 'can/may', 'Explanation': 'Used to ask permission to do something. Always use interrogative sentences. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.Permission(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'gok':{'ID': '121', 'word': 'gok', 'func': 'DeterminerV.Suggestion', 'arg': 1, 'exp': '[shall]', 'version': '4.0.0', 'Pronunciation': 'gok', 'How to use': 'gok A', 'Japanese': 'Aしましょうか', 'English': 'shall', 'Explanation': 'Used to make a proposal to do something. Always use interrogative sentences. (Type) Verb meaning addition', 'Programming Object': 'DeterminerV.Suggestion(A)', 'Return Object Type': 'Verb', 'Condition': 'type(A)==Verb'},
	'ga':{'ID': '122', 'word': 'ga', 'func': 'Pronoun.I', 'arg': 0, 'exp': '[Represents first-person pronouns]', 'version': '1.0.0', 'Pronunciation': 'ga', 'How to use': 'ga', 'Japanese': '私', 'English': 'I', 'Explanation': 'Represents one-person pronouns(Person).', 'Programming Object': 'Pronoun.I()', 'Return Object Type': 'Pronoun', 'Condition': ''},
	'ge':{'ID': '123', 'word': 'ge', 'func': 'Pronoun.you', 'arg': 0, 'exp': '[Represents second-person pronouns]', 'version': '1.0.0', 'Pronunciation': 'ge', 'How to use': 'ge', 'Japanese': 'あなた', 'English': 'you', 'Explanation': 'Represents two-person pronouns(Person).', 'Programming Object': 'Pronoun.you()', 'Return Object Type': 'Pronoun', 'Condition': ''},
	'gi':{'ID': '124', 'word': 'gi', 'func': 'Pronoun.he', 'arg': 0, 'exp': '[Represents third-person pronouns]', 'version': '1.0.0', 'Pronunciation': 'gi', 'How to use': 'gi', 'Japanese': '彼/彼女/それ', 'English': 'he/she/it', 'Explanation': 'Represents third-person pronouns.', 'Programming Object': 'Pronoun.he()', 'Return Object Type': 'Pronoun', 'Condition': ''},
	'gu':{'ID': '125', 'word': 'gu', 'func': 'Pronoun.proximal', 'arg': 0, 'exp': '[Represents a proximal pronoun]', 'version': '1.0.0', 'Pronunciation': 'gu', 'How to use': 'gu', 'Japanese': 'これ', 'English': 'this', 'Explanation': 'Represents a proximal pronoun.', 'Programming Object': 'Pronoun.proximal()', 'Return Object Type': 'Pronoun', 'Condition': ''},
	'go':{'ID': '126', 'word': 'go', 'func': 'Pronoun.distal', 'arg': 0, 'exp': '[Represents a distal pronoun]', 'version': '1.0.0', 'Pronunciation': 'go', 'How to use': 'go', 'Japanese': 'それ/あれ', 'English': 'that', 'Explanation': 'Represents a distal pronoun.', 'Programming Object': 'Pronoun.distal()', 'Return Object Type': 'Pronoun', 'Condition': ''},
	'wa':{'ID': '127', 'word': 'wa', 'func': 'Pronoun.interrogative', 'arg': 0, 'exp': '[Represents an interrogative determiners]', 'version': '1.0.0', 'Pronunciation': 'wa', 'How to use': 'wa', 'Japanese': 'どれ', 'English': 'what', 'Explanation': 'Represents an interrogative determiners.', 'Programming Object': 'Pronoun.interrogative()', 'Return Object Type': 'Pronoun', 'Condition': ''},
	'we':{'ID': '128', 'word': 'we', 'func': 'Pronoun.indefinite', 'arg': 0, 'exp': '[Represents an indefinite pronouns]', 'version': '1.0.0', 'Pronunciation': 'we', 'How to use': 'we', 'Japanese': 'どれか', 'English': 'something', 'Explanation': 'Represents an indefinite pronouns.', 'Programming Object': 'Pronoun.indefinite()', 'Return Object Type': 'Pronoun', 'Condition': ''},
	'kan':{'ID': '129', 'word': 'kan', 'func': 'WordV.create', 'arg': 0, 'exp': '[Produces something]', 'version': '1.0.0', 'Pronunciation': 'kan', 'How to use': 'kan', 'Japanese': '生み出す/作る/産む', 'English': 'create/make/bear', 'Explanation': "The original meaning is 'Produces something'.", 'Programming Object': 'WordV.create()', 'Return Object Type': 'Verb', 'Condition': ''},
	'ken':{'ID': '130', 'word': 'ken', 'func': 'WordV.destroy', 'arg': 0, 'exp': '[Destroys something]', 'version': '1.0.0', 'Pronunciation': 'ken', 'How to use': 'ken', 'Japanese': '破壊する/壊す/死ぬ', 'English': 'destroy/break/die', 'Explanation': "The original meaning is 'Destroys something'.", 'Programming Object': 'WordV.destroy()', 'Return Object Type': 'Verb', 'Condition': ''},
	'kin':{'ID': '131', 'word': 'kin', 'func': 'WordV.act', 'arg': 0, 'exp': '[Someone acts]', 'version': '1.0.0', 'Pronunciation': 'kin', 'How to use': 'kin', 'Japanese': '行動する/動く/実行する/歩く/働く', 'English': 'act/move/do/walk/work', 'Explanation': "The original meaning is 'Someone acts'.", 'Programming Object': 'WordV.act()', 'Return Object Type': 'Verb', 'Condition': ''},
	'kun':{'ID': '132', 'word': 'kun', 'func': 'WordV.turn', 'arg': 0, 'exp': '[Something turns]', 'version': '1.0.0', 'Pronunciation': 'kun', 'How to use': 'kun', 'Japanese': '回る/回転する/急ぐ/走る', 'English': 'turn/rotate/hurry/run', 'Explanation': "The original meaning is 'Something turns'.", 'Programming Object': 'WordV.turn()', 'Return Object Type': 'Verb', 'Condition': ''},
	'kon':{'ID': '133', 'word': 'kon', 'func': 'WordV.receive', 'arg': 0, 'exp': '[Receive something]', 'version': '1.0.0', 'Pronunciation': 'kon', 'How to use': 'kon', 'Japanese': '感じ取る/受信する/受け取る/入れる/摂取する/取得する/得る/習う/聞く/見る/食べる/飲む', 'English': 'receive/accept/acquire/get/learn/hear/see/listen/look at/watch/eat/drink', 'Explanation': "The original meaning is 'Receive something'.", 'Programming Object': 'WordV.receive()', 'Return Object Type': 'Verb', 'Condition': ''},
	'gan':{'ID': '134', 'word': 'gan', 'func': 'WordV.stimulate', 'arg': 0, 'exp': '[Something stimulates something]', 'version': '1.0.0', 'Pronunciation': 'gan', 'How to use': 'gan', 'Japanese': '発する/発信する/発射する/出す/送信する/送る/教える/刺激する/言う/話す/攻撃する', 'English': 'emit/transmit/put out/send/give/teach/stimulate/say/speak/attack', 'Explanation': "The original meaning is 'Something stimulates something'.", 'Programming Object': 'WordV.stimulate()', 'Return Object Type': 'Verb', 'Condition': ''},
	'gen':{'ID': '135', 'word': 'gen', 'func': 'WordV.exist', 'arg': 0, 'exp': '[Something exists]', 'version': '1.0.0', 'Pronunciation': 'gen', 'How to use': 'gen', 'Japanese': 'ある/いる/存在する/生きている/住んでいる/留まる/止まっている/休む', 'English': 'be/exist/live/stay/be stopping/get rest', 'Explanation': "The original meaning is 'the state in which something stays and exists’.", 'Programming Object': 'WordV.exist()', 'Return Object Type': 'Verb', 'Condition': ''},
	'gin':{'ID': '136', 'word': 'gin', 'func': 'WordV.use', 'arg': 0, 'exp': '[Something uses something]', 'version': '1.0.0', 'Pronunciation': 'gin', 'How to use': 'gin', 'Japanese': '使う/使用する', 'English': 'use', 'Explanation': "The original meaning is 'Something uses something'.", 'Programming Object': 'WordV.use()', 'Return Object Type': 'Verb', 'Condition': ''},
	'gun':{'ID': '137', 'word': 'gun', 'func': 'WordV.change', 'arg': 0, 'exp': '[Something changes]', 'version': '1.0.0', 'Pronunciation': 'gun', 'How to use': 'gun', 'Japanese': '変わる/なる/成長する/移行する/移動する', 'English': 'change/become/grow/transfer', 'Explanation': "The original meaning is 'Something changes'.", 'Programming Object': 'WordV.change()', 'Return Object Type': 'Verb', 'Condition': ''},
	'wan':{'ID': '138', 'word': 'wan', 'func': 'WordM.big', 'arg': 0, 'exp': '[Big]', 'version': '1.0.0', 'Pronunciation': 'wan', 'How to use': 'wan', 'Japanese': '大きい/長い/広い/高い/多い/重い', 'English': 'big/long/wide/tall/many/heavy/large', 'Explanation': "The original meaning is 'Big'.", 'Programming Object': 'WordM.big()', 'Return Object Type': 'Modifier', 'Condition': ''},
	'wen':{'ID': '139', 'word': 'wen', 'func': 'WordM.near', 'arg': 0, 'exp': '[Near]', 'version': '1.0.0', 'Pronunciation': 'wen', 'How to use': 'wen', 'Japanese': '近い/親しい/似ている/好きである', 'English': 'near/familiar/close to/similar/like', 'Explanation': "The original meaning is 'Near'.", 'Programming Object': 'WordM.near()', 'Return Object Type': 'Modifier', 'Condition': ''},
	'win':{'ID': '140', 'word': 'win', 'func': 'WordM.good', 'arg': 0, 'exp': '[Good]', 'version': '1.0.0', 'Pronunciation': 'win', 'How to use': 'win', 'Japanese': '良い/新しい/若い/美しい', 'English': 'good/new/young/beautiful', 'Explanation': "The original meaning is 'Good'.", 'Programming Object': 'WordM.good()', 'Return Object Type': 'Modifier', 'Condition': ''},
	'won':{'ID': '141', 'word': 'won', 'func': 'WordM.bright', 'arg': 0, 'exp': '[Bright]', 'version': '1.0.0', 'Pronunciation': 'won', 'How to use': 'won', 'Japanese': '明るい/白い/色鮮やかな', 'English': 'bright/white/colourful', 'Explanation': "The original meaning is 'Bright'.", 'Programming Object': 'WordM.bright()', 'Return Object Type': 'Modifier', 'Condition': ''},
	'pas':{'ID': '142', 'word': 'pas', 'func': 'Bool.false', 'arg': 0, 'exp': '[False {Boolean}]', 'version': '2.0.0', 'Pronunciation': 'pas', 'How to use': 'pas', 'Japanese': '偽', 'English': 'False (Boolean)', 'Explanation': 'Bool type to indicate False. It is a binary zero.', 'Programming Object': 'Bool.false()', 'Return Object Type': 'Bool', 'Condition': ''},
	'pos':{'ID': '143', 'word': 'pos', 'func': 'Bool.true', 'arg': 0, 'exp': '[True {Boolean}]', 'version': '2.0.0', 'Pronunciation': 'pos', 'How to use': 'pos', 'Japanese': '真', 'English': 'True (Boolean)', 'Explanation': 'Represents a Bool type True. It is a binary number 1.', 'Programming Object': 'Bool.true()', 'Return Object Type': 'Bool', 'Condition': ''},
	'pis':{'ID': '144', 'word': 'pis', 'func': 'Bool.B2N', 'arg': 2, 'exp': '[1st_arg is 2nd_arg {2nd_arg is true or false}]', 'version': '2.0.0', 'Pronunciation': 'pis', 'How to use': 'pis A B', 'Japanese': 'AはBである（Bは真偽）', 'English': 'A is B (B is true or false)', 'Explanation': 'Assigns true/false to Noun types.', 'Programming Object': 'Bool.B2N(A,B)', 'Return Object Type': 'Noun', 'Condition': 'type(A)==Noun AND type(B)==Bool'},
	'fas':{'ID': '145', 'word': 'fas', 'func': 'BoolList', 'arg': 0, 'exp': '[Create a list of true/false {BoolList}]', 'version': '2.0.0', 'Pronunciation': 'fas', 'How to use': 'fas', 'Japanese': '真偽のリスト（BoolList）を作成する', 'English': 'Create a list of true/false (BoolList)', 'Explanation': 'Creates an empty BoolList, which can be used to manage multiple Bool types.', 'Programming Object': 'BoolList()', 'Return Object Type': 'BoolList', 'Condition': ''},
	'fes':{'ID': '146', 'word': 'fes', 'func': 'BoolList.get', 'arg': 2, 'exp': '[Gets the 2nd_arg-th value of BoolList(1st_arg)]', 'version': '2.1.0', 'Pronunciation': 'fes', 'How to use': 'fes A B', 'Japanese': 'BoolList(A)のB番目の値を取得する', 'English': 'Gets the B-th value of BoolList(A)', 'Explanation': 'A is the target BoolList and B is the index BoolList. In this case, B is a natural number.', 'Programming Object': 'BoolList.get(A,B)', 'Return Object Type': 'Bool', 'Condition': 'type(A)==BoolList AND type(B)==BoolList'},
	'fis':{'ID': '147', 'word': 'fis', 'func': 'BoolList.append', 'arg': 2, 'exp': '[Add one Bool to the end of the BoolList]', 'version': '2.0.0', 'Pronunciation': 'fis', 'How to use': 'fis A B', 'Japanese': 'BoolListに1つのBoolを末尾に加える', 'English': 'Add one Bool to the end of the BoolList', 'Explanation': 'Add the Bool value B to the end of the BoolList A.', 'Programming Object': 'BoolList.append(A,B)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)==BoolList AND type(B)==Bool'},
	'fus':{'ID': '148', 'word': 'fus', 'func': 'BoolList.slice', 'arg': 3, 'exp': '[Get the 2nd_arg-th through 3rd_arg-th lists for a BoolList (1st_arg).]', 'version': '2.1.0', 'Pronunciation': 'fus', 'How to use': 'fus A B C', 'Japanese': 'AというBoolListに対して，B番目からC番目までのリストを取得する', 'English': 'Get the B-th through C-th lists for a BoolList (A).', 'Explanation': 'A is the target BoolList, and B and C are the index BoolLists. In this case, B and C are natural numbers. Also included are B and C.', 'Programming Object': 'BoolList.slice(A,B,C)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)==BoolList AND type(B)==BoolList AND type(C)==BoolList'},
	'fos':{'ID': '149', 'word': 'fos', 'func': 'BoolList.add', 'arg': 2, 'exp': '[Combine two BoolLists]', 'version': '2.0.0', 'Pronunciation': 'fos', 'How to use': 'fos A B', 'Japanese': '2つのBoolListを結合する', 'English': 'Combine two BoolLists', 'Explanation': 'Combines two BoolLists, A and B, and returns them.', 'Programming Object': 'BoolList.add(A,B)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)==BoolList AND type(B)==BoolList'},
	'mas':{'ID': '150', 'word': 'mas', 'func': 'BoolList.twoBit', 'arg': 2, 'exp': '[Create a BoolList consisting of 2 Bool values]', 'version': '2.0.0', 'Pronunciation': 'mas', 'How to use': 'mas A B', 'Japanese': '2つBoolの値からなるBoolListを作成する', 'English': 'Create a BoolList consisting of 2 Bool values', 'Explanation': 'Create a 2-bit BoolList.', 'Programming Object': 'BoolList.twoBit(A,B)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)==Bool AND type(B)==Bool'},
	'mis':{'ID': '151', 'word': 'mis', 'func': 'BoolList.fourBit', 'arg': 4, 'exp': '[Create a BoolList consisting of 4 Bool values]', 'version': '2.0.0', 'Pronunciation': 'mis', 'How to use': 'mis A B C D', 'Japanese': '4つBoolの値からなるBoolListを作成する', 'English': 'Create a BoolList consisting of 4 Bool values', 'Explanation': 'Create a 4-bit BoolList.', 'Programming Object': 'BoolList.fourBit(A,B,C,D)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)==Bool AND type(B)==Bool AND type(C)==Bool AND type(D)==Bool'},
	'mos':{'ID': '152', 'word': 'mos', 'func': 'BoolList.byte', 'arg': 8, 'exp': '[Create a BoolList consisting of 8 Bool values]', 'version': '2.0.0', 'Pronunciation': 'mos', 'How to use': 'mos X1 X2 X3 X4 X5 X6 X7 X8', 'Japanese': '8つBoolの値からなるBoolListを作成する', 'English': 'Create a BoolList consisting of 8 Bool values', 'Explanation': 'Create a 1-byte BoolList.', 'Programming Object': 'BoolList.byte(X1,X2,X3,X4,X5,X6,X7,X8)', 'Return Object Type': 'BoolList', 'Condition': 'type(X1)==Bool AND type(X2)==Bool AND type(X3)==Bool AND type(X4)==Bool AND type(X5)==Bool AND type(X6)==Bool AND type(X7)==Bool AND type(X8)==Bool'},
	'tas':{'ID': '153', 'word': 'tas', 'func': 'BoolList.NaturalNum', 'arg': 1, 'exp': '[BoolList is considered a natural number]', 'version': '2.0.0', 'Pronunciation': 'tas', 'How to use': 'tas A', 'Japanese': 'BoolListを2進数の自然数とみなす', 'English': 'BoolList is considered a binary natural number', 'Explanation': 'treats a number in BoolList as a natural binary number.', 'Programming Object': 'BoolList.NaturalNum(A)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)=BoolList'},
	'tes':{'ID': '154', 'word': 'tes', 'func': 'BoolList.Int', 'arg': 1, 'exp': '[BoolList is considered an integer]', 'version': '2.0.0', 'Pronunciation': 'tes', 'How to use': 'tes A', 'Japanese': 'BoolListを2進数の整数とみなす', 'English': 'BoolList is considered a binary integer', 'Explanation': 'treats a number in BoolList as a binary integer. It is also interpreted as an IEEE754 "single-precision floating-point number". Therefore, it must be 32 bits.', 'Programming Object': 'BoolList.Int(A)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)=BoolList'},
	'tis':{'ID': '155', 'word': 'tis', 'func': 'BoolList.Float', 'arg': 1, 'exp': '[BoolList is considered a floating number]', 'version': '2.0.0', 'Pronunciation': 'tis', 'How to use': 'tis A', 'Japanese': 'BoolListを2進数の浮動小数とみなす', 'English': 'BoolList is considered a binary floating number', 'Explanation': 'treats a number in BoolList as a binary floating decimal number.', 'Programming Object': 'BoolList.Float(A)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)=BoolList'},
	'tus':{'ID': '156', 'word': 'tus', 'func': 'BoolList.ASCII', 'arg': 1, 'exp': '[BoolList is considered an ASCII character]', 'version': '2.0.0', 'Pronunciation': 'tus', 'How to use': 'tus A', 'Japanese': 'BoolListをASCII文字とみなす', 'English': 'BoolList is considered an ASCII character', 'Explanation': 'treats a number in BoolList as an ASCII character.', 'Programming Object': 'BoolList.ASCII(A)', 'Return Object Type': 'BoolList', 'Condition': 'type(A)=BoolList'},
	'pat':{'ID': '157', 'word': 'pat', 'func': 'LangFunc.setFunc', 'arg': 2, 'exp': '[Set up a function that returns 2nd_arg named 1st_arg with a certain LangList as an argument]', 'version': '3.0.0', 'Pronunciation': 'pat', 'How to use': 'pat A B', 'Japanese': 'あるLangListを引数とするAという名前のBを返す関数を設定する', 'English': 'Set up a function that returns B named A with a certain LangList as an argument.', 'Explanation': 'Set before using the function. It is not possible to set more than one function with the same name.', 'Programming Object': 'LangFunc.setFunc(A,B)', 'Return Object Type': 'LangFunc', 'Condition': 'type(A)=Noun AND type(B)=LangList'},
	'pit':{'ID': '158', 'word': 'pit', 'func': 'LangFunc.arg', 'arg': 0, 'exp': '[Used for LangFunc.setFunc() arguments]', 'version': '3.0.0', 'Pronunciation': 'pit', 'How to use': 'pit', 'Japanese': 'LangFunc.setFunc()の引数用に使用する', 'English': 'Used for LangFunc.setFunc() arguments', 'Explanation': 'When defining a function for the second argument of LangFunc.setFunc(), this value can be substituted for the argument when executing the function when it is needed.', 'Programming Object': 'LangFunc.arg()', 'Return Object Type': 'LangList', 'Condition': ''},
	'pot':{'ID': '159', 'word': 'pot', 'func': 'LangFunc.runFunc', 'arg': 2, 'exp': '[Execute the configured LangFunc named 1st_arg with argument 2nd_arg]', 'version': '3.0.0', 'Pronunciation': 'pot', 'How to use': 'pot A B', 'Japanese': '設定したAという名前のLangFuncを引数Bとして実行する', 'English': 'Execute the configured LangFunc named A with argument B', 'Explanation': 'Executes the set function. Unconfigured function names cannot be executed.', 'Programming Object': 'LangFunc.runFunc(A,B)', 'Return Object Type': 'LangList', 'Condition': 'type(A)=Noun AND type(B)=LangList'},
	'fat':{'ID': '160', 'word': 'fat', 'func': 'LangList', 'arg': 0, 'exp': '[Create a list of LangObj {LangList}]', 'version': '3.0.0', 'Pronunciation': 'fat', 'How to use': 'fat', 'Japanese': 'LangObjのリストLangListを作成する', 'English': 'Create a list of LangObj (LangList)', 'Explanation': 'Creates an empty LangList, which can be used to manage multiple LangObj types.', 'Programming Object': 'LangList()', 'Return Object Type': 'LangList', 'Condition': ''},
	'fet':{'ID': '161', 'word': 'fet', 'func': 'LangList.get', 'arg': 2, 'exp': '[Gets the 2nd_arg-th value of LangList(1st_arg)]', 'version': '3.0.0', 'Pronunciation': 'fet', 'How to use': 'fet A B', 'Japanese': 'LangList(A)のB番目の値を取得する', 'English': 'Gets the B-th value of LangList(A)', 'Explanation': 'A is the target LangList and B is the index BoolList. In this case, B is a natural number.', 'Programming Object': 'LangList.get(A,B)', 'Return Object Type': 'LangObj', 'Condition': 'type(A)==LangList AND type(B)==BoolList'},
	'fit':{'ID': '162', 'word': 'fit', 'func': 'LangList.append', 'arg': 2, 'exp': '[Add one LangObj to the end of the LangList]', 'version': '3.0.0', 'Pronunciation': 'fit', 'How to use': 'fit A B', 'Japanese': 'LangListに1つのLangObjを末尾に加える', 'English': 'Add one LangObj to the end of the LangList', 'Explanation': 'Add the LangObj value B to the end of the LangList A.', 'Programming Object': 'LangList.append(A,B)', 'Return Object Type': 'LangList', 'Condition': 'type(A)==LangList AND type(B)==LangObj'},
	'fut':{'ID': '163', 'word': 'fut', 'func': 'LangList.slice', 'arg': 3, 'exp': '[Get the 2nd_arg-th through 3rd_arg-th lists for a LangList (1st_arg).]', 'version': '3.0.0', 'Pronunciation': 'fut', 'How to use': 'fut A B C', 'Japanese': 'AというLangListに対して，B番目からC番目までのリストを取得する', 'English': 'Get the B-th through C-th lists for a LangList (A).', 'Explanation': 'A is the target LangList, and B and C are the index BoolLists. In this case, B and C are natural numbers. Also included are B and C.', 'Programming Object': 'LangList.slice(A,B,C)', 'Return Object Type': 'LangList', 'Condition': 'type(A)==LangList AND type(B)==BoolList AND type(C)==BoolList'},
	'fot':{'ID': '164', 'word': 'fot', 'func': 'LangList.add', 'arg': 2, 'exp': '[Combine two LangLists]', 'version': '3.0.0', 'Pronunciation': 'fot', 'How to use': 'fot A B', 'Japanese': '2つのLangListを結合する', 'English': 'Combine two LangLists', 'Explanation': 'Combines two LangLists, A and B, and returns them.', 'Programming Object': 'LangList.add(A,B)', 'Return Object Type': 'LangList', 'Condition': 'type(A)==LangList AND type(B)==LangList'},
}